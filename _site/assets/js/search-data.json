{"0": {
    "doc": "Auditar Procesos",
    "title": "Auditar Procesos",
    "content": "# Auditar Procesos. {: .no_toc } {: .text-delta } - TOC {:toc} Es necesario tener idea del funcionamiento del sistema, aplicaciones y programas en general. Debemos saber si los procesos estan consumiendo recursos de manera optima o en exceso, o si hay aplicaciones que funcionan despacio y necesitan ser atunadas un poco. Las utilidades que discutimos en este espacio nos dan una vista interna a la salud de los procesos que estan corriendo en el sistema. ## ps El comando `ps` es el metodo mas usado para mostrar lo procesos activos. ```bash -> ps -ef UID PID PPID C STIME TTY TIME CMD root 1 0 0 00:16 ? 00:00:00 sleep infinity root 7385 1 0 00:24 ? 00:00:00 [gpg-agent] root 8599 0 0 00:28 pts/0 00:00:00 bash ntp 9340 1 0 01:36 ? 00:00:02 /usr/sbin/ntpd -p /var/run/ntp root 9968 8599 0 05:39 pts/0 00:00:00 ps -ef ``` Usando las opciones `-aux` muestra CPU y MEM que cada proceso esta usando. ```bash -> ps -aux USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND root 1 0.0 0.0 2788 1012 ? Ss 00:16 0:00 sleep infinity root 7385 0.0 0.0 0 0 ? Zs 00:24 0:00 [gpg-agent] apt-get install psmisc ``` En CentOS instala el paquete `pstree` disponible el repositorio `baseos`. ```bash -> yum whatprovides pstree ``` Y luego pudes usar el comando `pstree` para mostrar la organización de procesos en el sistema. ```bash -> pstree systemd-+-chronyd |-dbus-daemon |-systemd-journal `-systemd-udevd ``` ",
    "url": "/auditar-procesos/",
    
    "relUrl": "/auditar-procesos/"
  },"1": {
    "doc": "Cuentas de Usuarios",
    "title": "Cuentas de Usuarios",
    "content": "# Cuentas de Usuarios en Linux {: .no_toc } {: .text-delta } - TOC {:toc} ## Identificación de Usuario (uid) ## Identificación de Group (gid) ## Ficheros Importantes ### Fichero /etc/passwd ### Fichero /etc/group ### Fichero /etc/shadow ### Permisos Especiales /etc/sudo ## Crear Cuenta en Ubuntu ## Crear Cuenta en CentOS ",
    "url": "/cuentas-suarios/",
    
    "relUrl": "/cuentas-suarios/"
  },"2": {
    "doc": "Editando Ficheros",
    "title": "Editando Ficheros",
    "content": "# Editando Ficheros {: .no_toc } {: .text-delta } - TOC {:toc} ## Permiso de Editar Supongamos que el usuario `devuser` quiere editar el fichero `/etc/passwd` usando el comando `vi`. ```bash devuser@ubuntu1 [ DevEsp ] ~ hist:18 -> vi /etc/passwd ``` Al entar el comando vi, e intentar hacer cambios, ve este mensage: ```bash -- INSERT -- W10: Warning: Changing a readonly file ``` La razón es que el fichero le pertence al usuario `root` y `devuser` no tiene permiso a hacer cambios. ```bash devuser@ubuntu1 [ DevEsp ] ~ hist:17 -> ls -l /etc/passwd -rw-r--r-- 1 root root 1596 Jun 14 04:30 /etc/passwd ``` El comando `ls` muestra los permisos, asi come el grupo y usuario dueño de los ficheros. ```bash -> ls -lA total 8 -rw-r--r-- 1 root root 0 Jun 11 02:06 datafile1.txt -rw-r--r-- 1 root root 13 Jun 11 02:06 datafile2.txt drwxr-xr-x 2 root root 4096 Jun 11 03:53 pets/ ``` Podemos usar la opción `-n` para ver el número del usuario y de grupo para verificar que tienes acceso a los ficheros. En este ejemplo, el grupo es zero, asi come el usuario. Esto indica que cada articulo pertenece a `root`. ```bash -> ls -lAn total 8 -rw-r--r-- 1 0 0 0 Jun 11 02:06 datafile1.txt -rw-r--r-- 1 0 0 13 Jun 11 02:06 datafile2.txt drwxr-xr-x 2 0 0 4096 Jun 11 03:53 pets/ ``` ",
    "url": "/editando-ficheros/",
    
    "relUrl": "/editando-ficheros/"
  },"3": {
    "doc": "Ficheros y Directorios",
    "title": "Ficheros y Directorios",
    "content": "# Ficheros y Directorios {: .no_toc } {: .text-delta } - TOC {:toc} ## Propósito De Directorios y Ficheros Cuando ha pasado tiempo que hemos trabajado en un projecto, acumulamos mucha informacíon de tópicos diferentes. A un cierto punto es imperativo agrupar información relacionada para que la podamos manejar mas facil. Luego tenemos que: - Un fichero contiene informacíon de un tema en particular. - Un directorio nos ayuda a agrupar ficheros relacionados a un tema. Los ficheros pueden ser de varios tipos: texto, binario, pdf, zip, jpeg, etc. Este tipo de clasificación no se aplica a directorios. Es importante mantener la referencia a el directorio de inicio principal, lo podemos llamar directorio hogar que se denota con `~` or `$HOME`. En cualquier comando que entremos, podemos usar `~` como el punto de referencia a nuestro directorio de inicio. No importa donde estemos en el estructura de directorios siempre podemos volver a la base usando el comando `cd` de esta manera: ```sh -> cd -> cd ~ -> cd $HOME ``` ## Comandos Para Navegar Directorios y Ficheros Los comands básicos de navegación en la linea de comandos son `ls` y `cd`. Podemos usar una variedad de opciones o banderas para influenciar la salida de los comandos. Usaremos los comados siguientes: ls : listar archivos y ficheros mkdir : crear directorios cd : cambiar a un directorio cp : copiar ficheros o directorios mv : renombrar ficheros o directorios rm : borrar ficheros o directorios touch : utilidad para crear un fichero o actualizar fecha de creación echo : usado para representar texto en la terminal tree : utilidad para mostrar el árbol completo de la localidad designada {: .note } Estos comandos son de uso universal y funcionan de la misma manera en cualquier sistema operativo. Cada comando tiene opciones que alteran la salida del comando. ## Crear Directorios y Ficheros La sintaxis general para crear directorios es asi: ```bash mkdir [opciones] /paso/a/diretorio ``` Crear un directorio. ```bash -> mkdir data ``` Crear un subdirectorio (directorio dentro de otro directorio). ```bash -> mkdir data/pets ``` Crear una cadena de directorio y subdirectorios en un solo paso usando la opción `-p`. ```bash -> mkdir -p dir/subdir2/subdir2 ``` Cambiar a un directorio. ```bash -> cd data -> cd dir/subdir2/ ``` Crear un fichero con el comando `touch`. ```bash -> touch datafile1.txt ``` Crear un fichero con el comando `echo`. En este ejemplo, el fichero esta en un subdirectorio. ```bash echo \"fichero de Camoa\" > data/pets/camoa.txt ``` Crear un directory escondido ```bash -> mkdir .hidden_directory ``` Crear un fichero escondido usando el editor VI. ```bash -> vi .hidden_file ``` ## Listar Directorios y Ficheros La sintaxis general para listar directorios y ficheros es asi: ```bash ls [opciones] /paso/a/diretorio ls [opciones] /paso/a/diretorio/fichero ``` Listar el contenido de un directorio. La linea que contiene el símbolo `/` al final, indica que es un directorio. Los demas son ficheros. ```bash -> ls data/ datafile1.txt datafile2.txt pets/ ``` Listar un solo fichero en un directorio. ```bash -> ls data/datafile1.txt data/datafile1.txt ``` Listar ficheros en formato largo usando la opción `-l`. ```bash -> ls -l data/ total 8 -rw-r--r-- 1 root root 0 Jun 11 02:06 datafile1.txt -rw-r--r-- 1 root root 13 Jun 11 02:06 datafile2.txt drwxr-xr-x 2 root root 4096 Jun 11 02:37 pets/ ``` {: .highlight } > un guión `-` al inicio de la linea indica que es un fichero regular > > la letra `d` al principio de la linea, y el simbolo `/` al final de la linea. indica que es un directorio. Listar ficheros multiples usando el asterisco `*`. ```bash -> ls -l data/datafile* -rw-r--r-- 1 root root 0 Jun 11 02:06 data/datafile1.txt -rw-r--r-- 1 root root 13 Jun 11 02:06 data/datafile2.txt -> ls -l data/*.txt -rw-r--r-- 1 root root 0 Jun 11 02:06 data/datafile1.txt -rw-r--r-- 1 root root 13 Jun 11 02:06 data/datafile2.txt ls -l data/data*.w -rw-r--r-- 1 root root 0 Jun 11 02:06 data/datafile1.txt -rw-r--r-- 1 root root 13 Jun 11 02:06 data/datafile2.txt ``` Listar ficheros usando expresiones regulares [^1]. ```bash -> ls -l data/datafile[0-9]*.txt -rw-r--r-- 1 root root 0 Jun 11 02:06 data/datafile1.txt -rw-r--r-- 1 root root 13 Jun 11 02:06 data/datafile2.txt ``` [^1]: Discutiremos expresiones regulares extensamente en otro articulo. Usar el comando `tree` para listar el contenido entero de una localidad. ```bash -> tree . |-- Downloads |-- MyDocuments |-- data |-- datafile1.txt |-- datafile2.txt | `-- pets | `-- camoa.txt `-- temp ``` Listar contenido en forma recursiva con la opción `-R`. Esto es útil cuando queremos encontrar un fichero pero no sabemos exactamente donde se encuentra. ```bash -> ls -lR data data: total 8 -rw-r--r-- 1 root root 0 Jun 11 02:06 datafile1.txt -rw-r--r-- 1 root root 13 Jun 11 02:06 datafile2.txt drwxr-xr-x 2 root root 4096 Jun 11 03:53 pets/ data/pets: total 4 -rw-r--r-- 1 root root 94 Jun 11 02:37 camoa.txt ``` Listar solo directorios usando la opcíon `-d` ```bash -> ls -ld * drwxr-xr-x 2 root root 4096 Jun 11 00:12 Downloads/ drwxr-xr-x 2 root root 4096 Jun 11 00:12 MyDocuments/ drwxr-xr-x 2 root root 4096 Jun 11 02:06 data/ drwxr-xr-x 2 root root 4096 Jun 11 00:12 temp/ ``` Listar solo directorios usando `^d`. ```bash -> ls -l | grep ^d drwxr-xr-x 2 root root 4096 Jun 11 00:12 Downloads/ drwxr-xr-x 2 root root 4096 Jun 11 00:12 MyDocuments/ drwxr-xr-x 2 root root 4096 Jun 11 02:06 data/ drwxr-xr-x 2 root root 4096 Jun 11 00:12 temp/ ``` Listar solo ficheros usando `^-`. ```bash -> ls -l | grep ^- -rw-r--r-- 1 root root 0 Jun 11 02:06 datafile1.txt -rw-r--r-- 1 root root 13 Jun 11 02:06 datafile2.txt ``` Listar ficheros con la opción `-t` usada para mostrar los articulos que han sido modificados mas recientememte. Por defecto, mostrara la entrada mas reciente al principio de la lista. ```bash -> ls -lt total 16 drwxr-xr-x 3 root root 4096 Jun 11 02:35 data/ drwxr-xr-x 2 root root 4096 Jun 11 00:12 temp/ drwxr-xr-x 2 root root 4096 Jun 11 00:12 Downloads/ drwxr-xr-x 2 root root 4096 Jun 11 00:12 MyDocuments/ ``` Lo mismo que arriba, pero usando la opción `-r` para clasificar la salida en reverso con lo mas reciente listado por ultimo. ```bash -> ls -ltr total 16 drwxr-xr-x 2 root root 4096 Jun 11 00:12 MyDocuments/ drwxr-xr-x 2 root root 4096 Jun 11 00:12 Downloads/ drwxr-xr-x 2 root root 4096 Jun 11 00:12 temp/ drwxr-xr-x 3 root root 4096 Jun 11 02:35 data/ ``` Listar el inode correspondiente a un fichero usando la opción `-i`. ```bash -> ls -li data/pets/camoa.txt 3044362 -rw-r--r-- 1 root root 94 Jun 11 02:37 data/pets/camoa.txt ``` Listar las stadisticas completas de un fichero. ```bash -> stat data/pets/camoa.txt File: data/pets/camoa.txt Size: 94 Blocks: 8 IO Block: 4096 regular file Device: b2h/178d Inode: 3044362 Links: 1 Access: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: ( 0/ root) Access: 2023-06-11 02:37:53.148264837 +0000 Modify: 2023-06-11 02:37:53.148264837 +0000 Change: 2023-06-11 02:37:53.149171904 +0000 Birth: 2023-06-11 02:37:53.148264837 +0000 ``` Mostrar el tamaño de un fichero usando la opción `-h`, que indica notación humana legible. ```bash -> ls -lh data/pets/camoa.txt -rw-r--r-- 1 root root 94 Jun 11 02:37 data/pets/camoa.txt ``` La opción `-h` en conjunto con `-l` y `-s` muestran el tamaño del fichero como 1K 234M 2G etc. En el ejemplo anterior, el fichero es de 94K de tamaño. ## Copiar Directorios y Ficheros La sintaxis general para copiar directorios y ficheros es asi: ```bash cp [opciones] /paso/a/diretorio /paso/a/diretorio-nuevo cp [opciones] /paso/a/diretorio/fichero /paso/a/diretorio/fichero-nuevo ``` En este ejemplo, tenenos el fichero `camoa.txt` y lo compiamos a un nuevo fichero `pantera.txt`. ```bash -> ls -l -rw-r--r-- 1 root root 94 Jun 11 02:37 camoa.txt -> cp camoa.txt pantera.txt -> ls -l -rw-r--r-- 1 root root 94 Jun 11 02:37 camoa.txt -rw-r--r-- 1 root root 94 Jun 11 03:50 pantera.txt ``` Copiar directorios requiere la opción `-r` porque casi siempre los directorios no estan vacios. Aqui copiamos el directorio `pets` a `animals`. ```bash -> ls -l drwxr-xr-x 2 root root 4096 Jun 11 03:53 pets/ -> cp -r pets animals -> ls -l drwxr-xr-x 2 root root 4096 Jun 12 04:04 animals/ drwxr-xr-x 2 root root 4096 Jun 11 03:53 pets/ ``` ## Renombrar Directorios y Ficheros La sintaxis general para renombrar directorios y ficheros es asi: ```bash mv [opciones] /paso/a/diretorio /paso/a/diretorio-nuevo mv [opciones] /paso/a/diretorio/fichero /paso/a/diretorio/fichero-nuevo ``` Aqui decidimos cambiar el nombre del archivo `pantera.txt` a `obsidian.txt`. ```bash -> ls -l -rw-r--r-- 1 root root 94 Jun 11 02:37 camoa.txt -rw-r--r-- 1 root root 94 Jun 11 03:50 pantera.txt -> mv pantera.txt obsidian.txt -> ls -l -rw-r--r-- 1 root root 94 Jun 11 02:37 camoa.txt -rw-r--r-- 1 root root 94 Jun 11 03:50 obsidian.txt ``` De manera similar, podemos renombrar un directorio o subdirectorio. ```bash -> mv dir1 dir2 -> mv ~/dir1/subdir1 ~/dir1/subdir2 ``` ## Borrar Directorios y Ficheros La sintaxis general para borrar directorios y ficheros es asi: ```bash rm [opciones] /paso/a/diretorio /paso/a/diretorio-nuevo rm [opciones] /paso/a/diretorio/fichero /paso/a/diretorio/fichero-nuevo ``` Finalmente, decidimos borrar el archivo `obsidian.txt`. ```bash -> rm obsidian.txt ``` Borrar directorios requiere la opción `r` si tiene ficheros. > el símbolo `~` indica que esta directamente bajo el directorio de inicio ```bash -> rm -r ~/directorio ``` Podemos usar la opción `-f` para evitar la confirmación por cada articulo a borrar. ```bash -> rm -rf [fichero|directorio] ``` Se puede borrar mas de un fichero o directorio a la vez. ```bash -> rm -rf fichero1 fichero2 data/fichero3 -> rm -rf directorio1 dir/subdir ``` ## Ficheros y Directorios Escondidos El sistema operativo puede mantener ciertos fichero fuera de vista con el propósito de proteger información importante y prevenir que sea alterada o borrada accidentalmente. Se dice que un fichero o directorio es escondido cuando el primer símbolo en el nombre es un punto `.` seguido por letras y números, por ejemplo `.bashrc` Listar ficheros y directorios escondidos usando la opción `-a` en conjunto con la opción `-l`. ```bash -> ls -la /root total 88 drwx------ 1 root root 4096 Jun 11 02:37 ./ drwxr-xr-x 1 root root 4096 Jun 10 23:55 ../ -rw-r--r-- 1 root root 2896 Jun 11 00:01 .aliasrc -rw------- 1 root root 591 Jun 11 00:09 .bash_history -rw-r--r-- 1 root root 149 Jun 11 00:11 .bash_profile -rw-r--r-- 1 root root 466 Jun 11 00:09 .bashrc drwxr-xr-x 2 root root 4096 Jun 11 00:12 Downloads/ drwxr-xr-x 2 root root 4096 Jun 11 00:12 MyDocuments/ drwxr-xr-x 3 root root 4096 Jun 11 02:35 data/ drwxr-xr-x 2 root root 4096 Jun 11 00:12 temp/ ``` para omitir `.` y `..` podemos usar la opción `-A` asi: ```bash -> ls -lA /root total 88 -rw-r--r-- 1 root root 2896 Jun 11 00:01 .aliasrc -rw------- 1 root root 591 Jun 11 00:09 .bash_history -rw-r--r-- 1 root root 149 Jun 11 00:11 .bash_profile -rw-r--r-- 1 root root 466 Jun 11 00:09 .bashrc drwxr-xr-x 2 root root 4096 Jun 11 00:12 Downloads/ drwxr-xr-x 2 root root 4096 Jun 11 00:12 MyDocuments/ drwxr-xr-x 3 root root 4096 Jun 11 02:35 data/ drwxr-xr-x 2 root root 4096 Jun 11 00:12 temp/ ``` Todas las operaciones tales como copiar, renombrar, mover, etc, se aplica igualmente a ficheros y directorios escondidos. ## Paso Absoluto vs Paso Relativo El **paso absoluto** de un archivo o directorio se refiere a el paso que se sigue desde la raíz del sistema hasta su lugar final. El **paso relativo** se refiere a la localización en relación al punto donde nos encontramos en el sistema de archivos. Veamos un ejemplo. El usuario `devuser` esta en su directorio de inicio `/home/devuser` con la structure mostrada. Usamos el comando `pwd` para verificar donde nos encontramos, y el comando `tree` para visualizar la estructura del directorio. ```bash devuser@ubuntu1 [ DevEsp ] ~ hist:13 -> pwd /home/devuser devuser@ubuntu1 [ DevEsp ] ~ hist:14 -> tree . |-- Downloads |-- MyDocuments |-- data |-- animals | `-- camoa.txt |-- datafile1.txt |-- datafile2.txt | `-- pets | `-- camoa.txt |-- mydir |-- dir1 | |-- subdir1 | |-- subdir2 | `-- subdir3 | `-- dir2 |-- subdir1 |-- subdir2 | `-- subdir3 `-- temp ``` Esto muestra como listar el fichero camoa.txt usando el paso absoluto. ```bash devuser@ubuntu1 [ DevEsp ] ~ hist:15 -> ls -l /home/devuser/data/pets/camoa.txt -rw-r--r-- 1 devuser devuser 94 Jun 14 04:50 /home/devuser/data/pets/camoa.tx ``` Luego el usuario se cambia al directorio `mydir/dir1` y desde allí lista el fichero `camoa.txt` usando el paso relativo, es decir, el paso con respecto as su posición en la estructura del directorio. ```bash devuser@ubuntu1 [ DevEsp ] ~ hist:15 -> cd mydir/dir1 devuser@ubuntu1 [ DevEsp ] ~/mydir/dir1 hist:16 -> ls -l ../../data/pets/camoa.txt -rw-r--r-- 1 devuser devuser 94 Jun 14 04:50 ../../data/pets/camoa.txt ``` {: .highlight } Usamos dos puntos `..` para indicar que vamos a escalar un posición arriba; hacemos esto cuantas veces sea necesario para localizar el recurso fuera del directorio donde nos encontramos. ## Recursos Los siguientes enlaces estan disponibles en linea. * Página Manual de [ls](https://manpages.ubuntu.com/manpages/focal/es/man1/ls.1.html) * Página Manual de [mkdir](https://manpages.ubuntu.com/manpages/focal/es/man1/mkdir.1.html) * Página Manual de [cd](https://www.man7.org/linux/man-pages/man1/cd.1p.html) * Página Manual de [touch](https://www.man7.org/linux/man-pages/man1/touch.1.html) * Página Manual de [echo](https://www.man7.org/linux/man-pages/man1/echo.1.html) ",
    "url": "/ficheros-y-directorios/",
    
    "relUrl": "/ficheros-y-directorios/"
  },"4": {
    "doc": "Permisos Ficheros",
    "title": "Permisos Ficheros",
    "content": "# Permiso Ficheros {: .no_toc } {: .text-delta } - TOC {:toc} ## Chmod ## Chown ",
    "url": "/permiso-ficheros/",
    
    "relUrl": "/permiso-ficheros/"
  },"5": {
    "doc": "About",
    "title": "About",
    "content": "[comment]: # (Adds topnav bar above the main image) Home About News DevESP significa [Dev]ops en [ESP]añol. #### DevEsp es un sitio dedicado a esparcir los conocimientos de informática en el idioma Español. Nuestra tema es la exposición práctica de Linux, y temas relaciondos con Entrega Continua e Integración Continua en general. Temas a explorar incluyen Git, Ansible, Docker, Kubernetes, Jenkins, Base de Datos, y más. {: .highlight } En este sitio podria hacer referencia a recursos de información en Inglés. Haré lo mejor posible para asociar tales recursos de manera pertinente. Discutiremos conocimientos prácticos y actualizados que son usados diariamente en un ambiente típico de devops en un entorno actual de producción. [Return to main page]({{site.baseurl}}/). ",
    "url": "/about/",
    
    "relUrl": "/about/"
  },"6": {
    "doc": "Ansible",
    "title": "Ansible",
    "content": "[comment]: # (Adds topnav bar above the main image) Home About News # Ansible {: .no_toc } {: .text-delta } - TOC {:toc} ## First Subtitle This is the first section of the document. ## Second Subtitle Second section of the document. ## Third Subtitle And this third section of the document. ## Fourth Subtitle Some interesting examples follow. [Return to main page]({{site.baseurl}}/). ",
    "url": "/ansible/",
    
    "relUrl": "/ansible/"
  },"7": {
    "doc": "Conceptos Ansible",
    "title": "Conceptos Ansible",
    "content": "This page: Ansible Basics ",
    "url": "/conceptos-de-ansible/",
    
    "relUrl": "/conceptos-de-ansible/"
  },"8": {
    "doc": "Implementación Ansible",
    "title": "Implementación Ansible",
    "content": "This page: Implementacion de Ansible [Return to main page]({{site.baseurl}}/). ",
    "url": "/implementacion-de-ansible/",
    
    "relUrl": "/implementacion-de-ansible/"
  },"9": {
    "doc": "Provisión Ansible",
    "title": "Provisión Ansible",
    "content": "--- # Instalacion y Configuración de Ansible {: .no_toc } {: .text-delta } - TOC {:toc} --- ## First Subtitle This is the first section of the document. ## Second Subtitle Second section of the document. ## Third Subtitle And this third section of the document. ## Fourth Subtitle Some interesting examples follow. {: .note } Currently, the navigation structure is limited to 3 levels: grandchild pages cannot themselves have child pages. [Return to main page]({{site.baseurl}}/). ",
    "url": "/provision-de-ansible/",
    
    "relUrl": "/provision-de-ansible/"
  },"10": {
    "doc": "Bash",
    "title": "Bash",
    "content": "# Introducción a Bash {: .no_toc } {: .text-delta } - TOC {:toc} --- ## First Subtitle This is the first section of the document. ## Second Subtitle Second section of the document. ## Third Subtitle And this third section of the document. ## Fourth Subtitle Some interesting examples follow. {: .note } Currently, the navigation structure is limited to 3 levels: grandchild pages cannot themselves have child pages. [Return to main page]({{site.baseurl}}/). ",
    "url": "/bash/",
    
    "relUrl": "/bash/"
  },"11": {
    "doc": "Paquetes en CentOS",
    "title": "Paquetes en CentOS",
    "content": "# Manejo de Paquetes en CentOS {: .no_toc } {: .text-delta } - TOC {:toc} --- # YUM en RHEL/CentOS RedHat y CentOS usan el comando `yum` (tambien `dnf` ) para manejar paquetes de software. La sintaxis general the YUM es asi: ```bash yum [options] COMMAND ``` ## Operaciones Generales con YUM En seguida veremos varios comandos que nos permiten hacer lo siguiente: - listar repositorios - activar y desactivar repositorios - buscar paquetes - listar paquetes - instalar y desinstalar paquetes - mostrar informacion - usar el shell de yum ### Listar Repositorios Cada repositorio en CentOS/RHEL tiene un fichero correspondiente en `/etc/yum.repos.d/`. ```bash root@client1 [ CentOS8 ] ~ hist:305 -> ls -l /etc/yum.repos.d/ total 64 -rw-r--r-- 1 root root 721 Jun 18 18:28 CentOS-Linux-AppStream.repo -rw-r--r-- 1 root root 706 Jun 18 18:28 CentOS-Linux-BaseOS.repo -rw-r--r-- 1 root root 1132 Jun 18 18:28 CentOS-Linux-ContinuousRelease.repo -rw-r--r-- 1 root root 318 Sep 14 2021 CentOS-Linux-Debuginfo.repo -rw-r--r-- 1 root root 734 Jun 18 18:28 CentOS-Linux-Devel.repo -rw-r--r-- 1 root root 706 Jun 18 18:28 CentOS-Linux-Extras.repo -rw-r--r-- 1 root root 721 Jun 18 18:28 CentOS-Linux-FastTrack.repo -rw-r--r-- 1 root root 742 Jun 18 18:28 CentOS-Linux-HighAvailability.repo -rw-r--r-- 1 root root 693 Sep 14 2021 CentOS-Linux-Media.repo -rw-r--r-- 1 root root 708 Jun 18 18:28 CentOS-Linux-Plus.repo -rw-r--r-- 1 root root 726 Jun 18 19:15 CentOS-Linux-PowerTools.repo -rw-r--r-- 1 root root 1124 Sep 14 2021 CentOS-Linux-Sources.repo -rw-r--r-- 1 root root 1680 Apr 17 06:22 epel-modular.repo -rw-r--r-- 1 root root 1779 Apr 17 06:22 epel-testing-modular.repo -rw-r--r-- 1 root root 1431 Apr 17 06:22 epel-testing.repo -rw-r--r-- 1 root root 1332 Apr 17 06:22 epel.repo ``` Un repositorio esta activo cuando tiene `enabled=1`. Si tiene `enabled=0`, indica que esta desabilitado. En este ejemplo, el repositorio **powertools** esta activo porque tiene `enabled` igual a `1`. ```bash root@client1 [ CentOS8 ] ~ hist:307 -> cat /etc/yum.repos.d/CentOS-Linux-PowerTools.repo # CentOS-Linux-PowerTools.repo [powertools] name=CentOS Linux $releasever - PowerTools baseurl=http://vault.centos.org/$contentdir/$releasever/PowerTools/$basearch/os/ gpgcheck=1 enabled=1 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial ``` El siguiente comando muestra como listar todos los repositorios disponibles en el sistema. ```bash root@client1 [ CentOS8 ] ~ hist:254 -> yum repolist repo id repo name appstream CentOS Linux 8 - AppStream baseos CentOS Linux 8 - BaseOS epel Extra Packages for Enterprise Linux 8 - x86_64 extras CentOS Linux 8 - Extras powertools CentOS Linux 8 - PowerTools ``` ### Cual paquete nos da una utilidad? Por ejemplo, esto nos dice que el paquete at-3.1.20-11.el8.x86_64 provee la utilidad `at` ```bash root@client1 [ CentOS8 ] ~ hist:270 -> yum provides at Last metadata expiration check: 0:10:46 ago on Sun Jun 25 13:41:21 2023. at-3.1.20-11.el8.x86_64 : Job spooling tools Repo : baseos Matched from: Provide : at = 3.1.20-11.el8 ``` ### Listar paquetes Podemos listar un solo paquete. En este ejemplo listamos el paquete `at`. ```bash root@client1 [ CentOS8 ] ~ hist:270 -> yum list at Last metadata expiration check: 0:10:04 ago on Sun Jun 25 13:41:21 2023. Available Packages at.x86_64 3.1.20-11.el8 baseos ``` Esto muestra la lista completa de todos los paquetes disponibles de todos los repositorios presentes en el sistema. ```bash -> yum list --available ``` La lista puede ser bastante larga, asi que podemos restringir la busqueda a lo que nos interesa. Por ejemplo, aqui buscamos todos los paquetes referentes a `mysql`. ```bash -> yum list --available | grep mysql ``` ### Instalar un Paquete Podemos usar el parametro `install` y pasar el nombre del paquete. La operacion encontrara las dependencias disponibles si existen. En este ejemplo instalamos el paquete `at`. ```bash root@client1 [ CentOS8 ] ~ hist:268 -> yum install at Last metadata expiration check: 0:08:46 ago on Sun Jun 25 13:41:21 2023. Dependencies resolved. ===================================================================================== Package Architecture Version Repository Size ===================================================================================== Installing: at x86_64 3.1.20-11.el8 baseos 81 k Transaction Summary ===================================================================================== Install 1 Package Total download size: 81 k Installed size: 129 k Is this ok [y/N]: y Downloading Packages: at-3.1.20-11.el8.x86_64.rpm 196 kB/s | 81 kB 00:00 ------------------------------------------------------------------------------------- Total 195 kB/s | 81 kB 00:00 Running transaction check Transaction check succeeded. Running transaction test Transaction test succeeded. Running transaction Preparing : 1/1 Installing : at-3.1.20-11.el8.x86_64 1/1 warning: Unable to get systemd shutdown inhibition lock: Unit systemd-logind.service is masked. Running scriptlet: at-3.1.20-11.el8.x86_64 1/1 Verifying : at-3.1.20-11.el8.x86_64 1/1 Installed: at-3.1.20-11.el8.x86_64 Complete! ``` Para evitar tener que teclear la respuesta a la pregunta `Is this ok [y/N]:`, podemos pasar la opción `-y`. ```bash -> yum -y install at ``` ### Desinstalar un Paquete Para desinstalar in paquete solo tenemos que usar el parametro `remove` y pasar el nombre del paquete. En este ejemplo borramos el paquete `at`. ```bash root@client1 [ CentOS8 ] ~ hist:269 -> yum remove at Dependencies resolved. ========================================================================================== Package Architecture Version Repository Size ========================================================================================== Removing: at x86_64 3.1.20-11.el8 @baseos 129 k Transaction Summary ========================================================================================== Remove 1 Package Freed space: 129 k Is this ok [y/N]: y Running transaction check Transaction check succeeded. Running transaction test Transaction test succeeded. Running transaction Preparing : 1/1 Running scriptlet: at-3.1.20-11.el8.x86_64 1/1 warning: Unable to get systemd shutdown inhibition lock: Unit systemd-logind.service is masked. Erasing : at-3.1.20-11.el8.x86_64 1/1 Running scriptlet: at-3.1.20-11.el8.x86_64 1/1 Verifying : at-3.1.20-11.el8.x86_64 1/1 Removed: at-3.1.20-11.el8.x86_64 Complete! ``` ### Mostrar información acerca de un paquete Para mostrar los detalles pertinentes a un paquete solo tenemos que usar el parametro `info` y pasar el nombre del paquete. En este ejemplo obtenemos la información del paquete `at`. ```bash root@client1 [ CentOS8 ] ~ hist:266 -> yum info at Last metadata expiration check: 0:34:16 ago on Sun Jun 25 13:41:21 2023. Available Packages Name : at Version : 3.1.20 Release : 11.el8 Architecture : x86_64 Size : 81 k Source : at-3.1.20-11.el8.src.rpm Repository : baseos Summary : Job spooling tools URL : http://ftp.debian.org/debian/pool/main/a/at License : GPLv3+ and GPLv2+ and ISC and MIT and Public Domain Description : At and batch read commands from standard input or from a specified : file. At allows you to specify that a command will be run at a : particular time. Batch will execute commands when the system load : levels drop to a particular level. Both commands use user's shell. :y : You should install the at package if you need a utility for : time-oriented job control. Note: If it is a recurring job that will : need to be repeated at the same time every day/week, etc. you should : use crontab instead. ``` Algunos aspectos importates son: Architecture : reflejan en la que este paquete trabaja Source : el nombre completo de el RPM Repository : el repositorio de origen ### Buscar un paquete Para mostrar todos los paquetes relacionados a una categoria podemos usar el parametro `search` y pasar el nombre del paquete. En este ejemplo obtenemos la información del paquete `httpd`. La lista mostrada aqui es parcial. ```bash root@client1 [ CentOS8 ] ~ hist:267 -> yum search httpd Last metadata expiration check: 0:07:53 ago on Sun Jun 25 13:41:21 2023. =========================== Name Exactly Matched: httpd =================================== httpd.x86_64 : Apache HTTP Server =========================== Name Matched: httpd =========================================== httpd-devel.x86_64 : Development interfaces for the Apache HTTP server httpd-filesystem.noarch : The basic directory layout for the Apache HTTP server httpd-manual.noarch : Documentation for the Apache HTTP server httpd-tools.x86_64 : Tools for use with the Apache HTTP Server libmicrohttpd.i686 : Lightweight library for embedding a webserver in applications libmicrohttpd.x86_64 : Lightweight library for embedding a webserver in applications lighttpd.x86_64 : Lightning fast webserver with light system requirements perl-Test-Fake-HTTPD.noarch : Fake HTTP server module for testing sympa-httpd.x86_64 : Sympa with Apache HTTP Server sysusage-httpd.noarch : Apache configuration for sysusage thttpd.x86_64 : A tiny, turbo, throttleable lightweight HTTP server ========================= Summary Matched: httpd =========================================== mod_auth_mellon.x86_64 : A SAML 2.0 authentication module for the Apache Httpd Server mod_dav_svn.x86_64 : Apache httpd module for Subversion server ``` ## Otras Opciones Usadas Con YUM Has otras actividade menos comunes que podemos hacer con YUM. ### Historia de Actividad Podemos mostrar la historia de actividades recientes que YUM ha ejecutado. ```bash Sun 2023Jun25 13:46:59 PDT root@client1 [ CentOS8 ] ~ hist:265 -> yum history ID | Command line | Date and time | Action(s) | Altered -------------------------------------------------------------------------------------------- 18 | install authselect -y | 2023-06-24 22:38 | Install | 2 EE 17 | install pam-devel | 2023-06-24 20:57 | Install | 1 EE 16 | install redhat-rpm-config -y | 2023-06-24 20:55 | Install | 16 EE 15 | install httpd-devel | 2023-06-24 20:52 | Install | 8 EE 14 | install httpd | 2023-06-24 20:51 | Install | 11 EE ``` Las historia muestra que hemos instalado varios paquetes y la fecha. Esto puede ser muy útil para auditar y encontrar la razón de algun problema. ### Limpiar el Caché Si asi lo requerimos, podemos limpiar el caché de la computadora ```bash root@client1 [ CentOS8 ] ~ hist:273 -> yum clean all 45 files removed ``` ### Recrear el Caché Podemos limpiar el caché de la computadora. ```bash root@client1 [ CentOS8 ] ~ hist:275 -> yum makecache CentOS Linux 8 - AppStream 6.0 MB/s | 8.4 MB 00:01 CentOS Linux 8 - BaseOS 5.9 MB/s | 4.6 MB 00:00 CentOS Linux 8 - Extras 39 kB/s | 10 kB 00:00 CentOS Linux 8 - PowerTools 4.0 MB/s | 2.3 MB 00:00 Extra Packages for Enterprise Linux 8 - x86_64 2.7 MB/s | 16 MB 00:05 Metadata cache created. ``` ### Grupos de Software Ocasionalmente deseamos intalar un grupo entero de paquetes. Podemos usar el parametro `group` para buscar los nombres de grupos de paquetes. ```bash root@client1 [ CentOS8 ] ~ hist:276 -> yum group Last metadata expiration check: 0:00:45 ago on Sun Jun 25 14:18:31 2023. Available Groups: 14 Sun 2023Jun25 14:19:17 PDT root@client1 [ CentOS8 ] ~ hist:277 -> yum grouplist Last metadata expiration check: 0:00:50 ago on Sun Jun 25 14:18:31 2023. Available Environment Groups: Server with GUI Server Minimal Install Workstation KDE Plasma Workspaces Virtualization Host Custom Operating System Available Groups: Container Management .NET Core Development RPM Development Tools Development Tools Graphical Administration Tools Headless Management Legacy UNIX Compatibility Network Servers Scientific Support Security Tools Smart Card Support System Tools Fedora Packager Xfce ``` El siguiente comando instala un grupo entero de paquetes. ```bash -> yum groupinstall \"Development Tools\" ``` ### Usar el SHELL de YUM Shell specific arguments: config : set config options help : print help repository (or repo) : enable, disable or list repositories resolvedep : resolve the transaction set transaction (or ts) : list, reset or run the transaction set run : resolve and run the transaction set exit (or quit) : exit the shell Iniciamos la session interactiva con el command `yum shell`. ```bash root@client1 [ CentOS8 ] ~ hist:280 -> yum shell Last metadata expiration check: 0:02:21 ago on Sun Jun 25 14:18:31 2023. > info httpd Installed Packages Name : httpd Version : 2.4.37 Release : 43.module_el8.5.0+1022+b541f3b1 Architecture : x86_64 Size : 4.3 M Source : httpd-2.4.37-43.module_el8.5.0+1022+b541f3b1.src.rpm Repository : @System From repo : appstream Summary : Apache HTTP Server URL : https://httpd.apache.org/ License : ASL 2.0 Description : The Apache HTTP Server is a powerful, efficient, and extensible : web server. ``` Una vez en el YUM SHELL hacemos lo siguiente: Instalar un paquete. ```bash > install httpd Package httpd-2.4.37-43.module_el8.5.0+1022+b541f3b1.x86_64 is already installed. ``` Abilitar o desabilitar in repositorio. ```bash > repository disable epel Last metadata expiration check: 0:06:27 ago on Sun Jun 25 14:18:26 2023. > repository enable epel Last metadata expiration check: 0:06:27 ago on Sun Jun 25 14:18:31 2023. > ``` Podemos dejar el yum shell cuando hemos completado las tareas. ```bash > quit Leaving Shell ``` ## Bajar e Instalar RPM Manualmente Podemos estar en una situación en la que tenemos que instalar un rpm manualmente. Sigamos los pasos siguientes. Crear directorio donde bajaremos el rpm. ```bash root@client1 [ CentOS8 ] hist:295 -> mkdir Downloads ``` Entrar el comando para bajar el rpm. ```bash root@client1 [ CentOS8 ] hist:302 -> yum download at-3.1.20-11.el8.x86_64 --destdir Downloads Last metadata expiration check: 0:40:55 ago on Sun Jun 25 14:18:31 2023. at-3.1.20-11.el8.x86_64.rpm 183 kB/s | 81 kB 00:00 root@client1 [ CentOS8 ] hist:303 -> ll Downloads/ -rw-r--r-- 1 root root 83344 Jun 25 14:59 at-3.1.20-11.el8.x86_64.rpm ``` Entrar el comando para instalar el rpm. ```bash root@client1 [ CentOS8 ] hist:304 -> yum install Downloads/at-3.1.20-11.el8.x86_64.rpm ``` ",
    "url": "/centos-package-management/",
    
    "relUrl": "/centos-package-management/"
  },"12": {
    "doc": "Markdown CheatSheet",
    "title": "NOTE 1",
    "content": "London is the capital of England. ",
    "url": "/markdown/",
    
    "relUrl": "/markdown/"
  },"13": {
    "doc": "Markdown CheatSheet",
    "title": "NOTE 2",
    "content": "Paris is the capital of France. Ejemplos para sintax en documentos. See the [markdownguide](https://www.markdownguide.org/cheat-sheet) ## highlighted PARAGRAPH {: .highlight } A highlighted PARAGRAPH ## NOTE paragraph {: .note } A NOTE paragraph {: .note } > If you have cloned/forked and customised the theme repo, > and pull the changes of a new release to your clone, > you may need to resolve merge conflicts. {: .note } Currently, the navigation structure is limited to 3 levels: grandchild pages cannot themselves have child pages. ## An important paragraph {: .important } > A paragraph > > Another paragraph > > The last paragraph ## Something NEW {: .new } > Something NEW > > Another paragraph > > The last paragraph ## Nested CALLOUTS {: .important } > {: .warning } > A paragraph ## Warning {: .warning } > If your configuration states `remote_theme: just-the-docs/just-the-docs`, your > website is built using the current `main` branch of the theme, which may include > changes made after the latest release; see the [CHANGELOG]. > > If your configuration states `theme: just the docs` and your `Gemfile` specifies > `gem \"just-the-docs\"`, your website is always built using the latest release. --- ## Footnote (callouts) The website now uses *callouts*[^callouts] to draw attention to important information. You type the verbiage of the callout right below. [^callouts]: The theme website configuration defines the callout titles and colors used there. Websites that use the theme have to configure their own callout titles and colors. The callout contents shows up at the bottom of the page. Here's a sentence with a footnote. [^1] [^1]: This is the footnote. --- The file `about.markdown` is used to give information about the site. ```html TEXT . ``` # Heading 1 Below is a thick line that can be used to separate main part of the doc. https://stackoverflow.com/questions/8702708/css3-how-to-get-a-5px-wide-thick-horizontal-line http://www.sovavsiti.cz/css/hr.html ## Heading 2 ### Heading 3 ## blockquote > this is a blockquote > another > block quote ## Ordered List 1. First item 2. Second item 3. Third item ## Unordered List - First item - Second item - Third item * comando * uno * dos * opcion * uno * dos * argumento * uno * dos ## Code This `code` is inline. ## Link See [this link](https://www.example.com) for more information. [Link to another page](another-page). ## Tabla | Syntax | Description | ----------- | ----------- | Header | Title | Paragraph | Text | Paragraph | Text | ## Fenced Code Block ``` { \"firstName\": \"John\", \"lastName\": \"Smith\", \"age\": 25 } ``` ## Strikethrough Text can be **bold**, _italic_, or ~~strikethrough~~. some say ~~the world is flat~~, or is it? ## Highlight, Bold, Italics I need to highlight these **very important words** to be very clear. Preview dark color scheme There should be whitespace between paragraphs. We recommend including a README, or a file with information about your project. This is a normal paragraph following a header. GitHub is a code hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere. # [](#header-1)Header 1 Note how these headers have an anchor that shows up in the URL. The anchor shows in the URL when you click on the paperclip icon next to the header. You can then bookmark the URL for that particular header. ## [](#header-2)Header 2 > This is a blockquote following a header. > > When something is important enough, you do it even if the odds are not in your favor. ### [](#header-3)Header 3 ```js // Javascript code with syntax highlighting. var fun = function lang(l) { dateformat.i18n = require('./lang/' + l) return true; } ``` ```ruby # Ruby code with syntax highlighting GitHubPages::Dependencies.gems.each do |gem, version| s.add_dependency(gem, \"= #{version}\") end ``` #### [](#header-4)Header 4 `with code not transformed` * This is an unordered list following a header. * This is an unordered list following a header. * This is an unordered list following a header. ##### [](#header-5)Header 5 1. This is an ordered list following a header. 2. This is an ordered list following a header. 3. This is an ordered list following a header. ###### [](#header-6)Header 6 [This is a very long link which wraps and therefore doesn't overflow even when it comes at the beginning](.) of the line. - [This is a very long link which wraps and therefore doesn't overflow the line when used first in an item ](.) in a list. | head1 | head two | three |:-------------|:------------------|:------| ok | good swedish fish | nice | out of stock | good and plenty | nice | ok | good `oreos` | hmm | ok | good `zoute` drop | yumm | ### There's a horizontal rule below this. * * * ### Here is an unordered list: * Item foo * Item bar * Item baz * Item zip ### And an ordered list: 1. Item one 1. Item two 1. Item three 1. Item four ### And an ordered list, continued: 1. Item one 1. Item two Some text {:style=\"counter-reset:none\"} 1. Item three 1. Item four ### And an ordered list starting from 42: {:style=\"counter-reset:step-counter 41\"} 1. Item 42 1. Item 43 1. Item 44 ### And a nested list: - level 1 item - level 2 item - level 2 item - level 3 item - level 3 item - level 1 item - level 2 item - level 2 item - level 2 item - level 1 item - level 2 item - level 2 item - level 1 item ### Nesting an ol in ul in an ol - level 1 item (ul) 1. level 2 item (ol) 1. level 2 item (ol) - level 3 item (ul) - level 3 item (ul) - level 1 item (ul) 1. level 2 item (ol) 1. level 2 item (ol) - level 3 item (ul) - level 3 item (ul) 1. level 4 item (ol) 1. level 4 item (ol) - level 3 item (ul) - level 3 item (ul) - level 1 item (ul) ### And a task list - [ ] Hello, this is a TODO item - [ ] Hello, this is another TODO item - [x] Goodbye, this item is done ### Nesting task lists - [ ] level 1 item (task) - [ ] level 2 item (task) - [ ] level 2 item (task) - [ ] level 1 item (task) - [ ] level 1 item (task) ### Nesting a ul in a task list - [ ] level 1 item (task) - level 2 item (ul) - level 2 item (ul) - [ ] level 1 item (task) - [ ] level 1 item (task) ### Nesting a task list in a ul - level 1 item (ul) - [ ] level 2 item (task) - [ ] level 2 item (task) - level 1 item (ul) - level 1 item (ul) ### Large image ![](../../assets/images/devesp_logo.png) ### Labels I'm a label {: .label } blue {: .label .label-blue } green {: .label .label-green } purple {: .label .label-purple } yellow {: .label .label-yellow } red {: .label .label-red } **bold** {: .label } *italic* {: .label } ***bold + italic*** {: .label } Try This >>> {: .label .label-blue } ### HTML syntax test This is an HTML paragraph test . ### Definition lists can be used with HTML syntax. Name Godzilla Born 1952 Birthplace Japan Color Green #### Multiple description terms and values Term : Brief description of Term Longer Term : Longer description of Term, possibly more than one line Term1 : First description of Term, possibly more than one line : Second description of Term, possibly more than one line Term1 Term2 : Single description of Term1 and Term2, possibly more than one line Term1 Term2 : First description of Term1 and Term2, possibly more than one line : Second description of Term1 and Term2, possibly more than one line ### More code We can code with python. Try This >>> {: .label .label-blue } ```python{% raw %} def dump_args(func): \"This decorator dumps out the arguments passed to a function before calling it\" argnames = func.func_code.co_varnames[:func.func_code.co_argcount] fname = func.func_name def echo_func(*args,**kwargs): print fname, \":\", ', '.join( '%s=%r' % entry for entry in zip(argnames,args) + kwargs.items()) return func(*args, **kwargs) return echo_func @dump_args def f1(a,b,c): print a + b + c f1(1, 2, 3) def precondition(precondition, use_conditions=DEFAULT_ON): return conditions(precondition, None, use_conditions) def postcondition(postcondition, use_conditions=DEFAULT_ON): return conditions(None, postcondition, use_conditions) class conditions(object): __slots__ = ('__precondition', '__postcondition') def __init__(self, pre, post, use_conditions=DEFAULT_ON): if not use_conditions: pre, post = None, None self.__precondition = pre self.__postcondition = post {% endraw %} ``` Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. #### THANK YOU FOR READING THIS FAR! [comment]: # (This is a comment, it will not be included) [comment]: # (in the output file unless you use it in) [comment]: # (a reference style link.) [//]: # (This is a comment, it will not be included) [//]: # (in the output file unless you use it in) [//]: # (a reference style link.) ``` ``` [Return to main page]({{site.baseurl}}/). ",
    "url": "/markdown/",
    
    "relUrl": "/markdown/"
  },"14": {
    "doc": "Markdown CheatSheet",
    "title": "Markdown CheatSheet",
    "content": "[comment]: # (Adds topnav bar above the main image) Home News About # {{ page.title }} {: .no_toc } {: .text-delta } - TOC {:toc} ## Emojis Thi is an emoji &#128512; ## custom NOTE ",
    "url": "/markdown/",
    
    "relUrl": "/markdown/"
  },"15": {
    "doc": "DevOps",
    "title": "DevOps",
    "content": "[comment]: # (Adds topnav bar above the main image) Home About News # DevOps {: .no_toc } {: .text-delta } - TOC {:toc} ## Que Es DevOps? DevOps es un termino que combina lo principios de Desarrollo (Development) y Operaciones (Operations). Hace unos pocos años en el mundo the la Tecnología de Información y Comunicación (TIC) había una separación de responsabilidad entre individuos que practicaban operaciones, ingeniería, seguridad, desarrollo, y automatización entre otras cosas. Hoy día hay una mezcla de responsabilidades dentro de los equipos que comparten todas las actividades desde concepción hasta implementación de procesos. a idea es cooperación y fluidez. Así nació DevOps. Al adoptar y mezclar los principios de DevOps se experimenta un mas alto rendimiento y confiabilidad de operaciones y desarrollo en general. Entre mas automatizados los procesos, se cometen menos errores. También se agilizan los procesos de implementación al introducir mejoras y cambios de una forma rápida, y metódica cuyo rendimiento pude ser medido y calibrado para mejoras futuras. El resultado es innovación continua. ## Que Es Alta Disponibilidad? El termino de Alta Disponibilidad (High Availability) se aplica a un ambiente en el que el tiempo de inactividad de sistemas es absolutamente inaceptable. El objetivo es asegurar la operación continua, sin interrupción y con un alto grado de confiabilidad. Usualmente estos ambientes son de operaciones críticas en el que fallas resultan en graves interrupciones en acceso al cliente causando perdidas financieras. Clientes pierden confianza en un negocio que no garantiza la disposición de servicios continuos. Por ejemplo, imaginemos que pasa cuando vamos al sitio en linea de un banco y no podemos hacer una transacción de compra porque el sitio no esta disponible. Luego entonces, la responsabilidad de ingenieros de DevOps es garantizar que la infrastructura del negocio es Altamente Disponible todo el tiempo. ## Que Hace un Ingeniero de DevOps? La gran mayoria de roles en DevOps caen en las categorias siguientes: * Infrastructura: Fisica o Virtual * Base de Datos * Seguridad: PCI o non-PCI * Desarrollo: Aplicaciones, Automatizacion, Mantenimiento de Codigo * CI/CD: Integración Continua / Entrega Continua Cuando vamos a un sitio de internet y buscamos avisos de trabajo usando la palabra clave “devops” nos encontramos con posiciones disponibles como las siguientes: * Lider Ingeniero De Software * Administrador de Base de Datos * Ingeniero de DevOps * Arquitecto DevOps * Platforma de Nubes Así que podemos ver que el termino se aplica a roles de varias disciplinas. Todas las posiciones mostraran que se requieren habilidades similares pero alineadas con el rol especifico y las necesidades del empleador. Una cosa es clara: en la mayoría de los casos se requiere conocimiento de infrastructure, desarrollo, automatización, seguridad y métodos ágiles. En muchos casos sobresale el requerimiento de esto dos aspectos conocidos como CI/CD: * Integración Continua (Continuos Integration) * Entrega Continua (Continuous Delivery) Con esos requerimientos, tocamos una area mas allá de lo básico. Uno de los principios mas elementales de DevOps es que tenemos que actualizar nuestro conocimientos continuamente. Es imperativo estar al día con los desarrollos continuos del mundo tecnológico o corremos el riesgo de ser obsoletos. [Return to main page]({{site.baseurl}}/). ",
    "url": "/devops-en-espa%C3%B1ol/",
    
    "relUrl": "/devops-en-español/"
  },"16": {
    "doc": "Docker",
    "title": "Docker",
    "content": "[comment]: # (Adds topnav bar above the main image) Home About # Docker {: .no_toc } {: .text-delta } - TOC {:toc} En este document hablaremos the Docker. _El objectivo es enternder la manera de usar esta herramienta para crear un ambiente para probar varios aspectos de Docker._ --- ## First Subtitle This is the first section of the document. ## Second Subtitle Second section of the document. ## Third Subtitle And this third section of the document. ## Fourth Subtitle Some interesting examples follow. {: .note } Currently, the navigation structure is limited to 3 levels: grandchild pages cannot themselves have child pages. [Return to main page]({{site.baseurl}}/). ",
    "url": "/docker-en-espa%C3%B1ol/",
    
    "relUrl": "/docker-en-español/"
  },"17": {
    "doc": "Docker Compose",
    "title": "Docker Compose",
    "content": "--- # Docker Compose {: .no_toc } {: .text-delta } - TOC {:toc} --- ## First Subtitle This is the first section of the document. ## Second Subtitle Second section of the document. ## Third Subtitle And this third section of the document. ## Fourth Subtitle Some interesting examples follow. {: .note } Currently, the navigation structure is limited to 3 levels: grandchild pages cannot themselves have child pages. [Return to main page]({{site.baseurl}}/). ",
    "url": "/docker_compose/",
    
    "relUrl": "/docker_compose/"
  },"18": {
    "doc": "Implementación Docker",
    "title": "Implementación Docker",
    "content": "This page: Implementacion de Docker [Return to main page]({{site.baseurl}}/). ",
    "url": "/docker_implementation/",
    
    "relUrl": "/docker_implementation/"
  },"19": {
    "doc": "Listar En Docker",
    "title": "Listar En Docker",
    "content": "## Listar la version de Docker Ejecutemos el comando para listar la version the minikube instalada localmente. ```bash -> docker version Client: Cloud integration: v1.0.29 Version: 20.10.22 API version: 1.41 Go version: go1.18.9 Git commit: 3a2c30b Built: Thu Dec 15 22:28:41 2022 OS/Arch: darwin/amd64 Context: default Experimental: true ``` Tambien se pueded listar de esta manera. ``` -> docker --version Docker version 20.10.22, build 3a2c30b ``` ## Listar Imagenes de Docker El comando `docker image ls` lista las imagenes de docker presentes en el sistema. {: .note } La lista es dinámica y puede cambiar a medida que agregamos o borramos imagenes ```bash -> docker image ls REPOSITORY TAG IMAGE ID CREATED SIZE prom/prometheus latest a5624f16ebec 2 months ago 223MB ubuntu 22.04 6b7dfa7e8fdb 2 months ago 77.8MB ubuntu 20.04 d5447fc01ae6 2 months ago 72.8MB grafana/grafana latest 179ad45e2c74 2 months ago 315MB docker/volumes-backup-extension 1.1.1 afd08623b0ee 2 months ago 118MB portainer/portainer-ce alpine ecdb4fbad999 3 months ago 292MB ``` Definición de terminos basado el la informacíon arriba. REPOSITORY el repositorio de origen donde localizar la imagen TAG palabra alfanumérica identificando la imagen IMAGE ID suma de sha identificando la imagen internamente en el sistema CREATED fecha cuando la imagen fue creada SIZE tamaño de la imagen en megabytes [Return to main page]({{site.baseurl}}/). ",
    "url": "/docker_list/",
    
    "relUrl": "/docker_list/"
  },"20": {
    "doc": "Provisión Docker en CentOS",
    "title": "Provisión Docker en CentOS",
    "content": "--- # Instalacion y Configuración de Docker en CentOS {: .no_toc } {: .text-delta } - TOC {:toc} --- ## First Subtitle This is the first section of the document. ## Second Subtitle Second section of the document. ## Third Subtitle And this third section of the document. ## Fourth Subtitle Some interesting examples follow. {: .note } Currently, the navigation structure is limited to 3 levels: grandchild pages cannot themselves have child pages. [Return to main page]({{site.baseurl}}/). ",
    "url": "/docker_provision/",
    
    "relUrl": "/docker_provision/"
  },"21": {
    "doc": "Provisión Docker en Ubuntu",
    "title": "Provisión Docker en Ubuntu",
    "content": "--- # Instalacion y Configuración de Docker en Ubuntu {: .no_toc } {: .text-delta } - TOC {:toc} --- ## First Subtitle This is the first section of the document. ## Second Subtitle Second section of the document. ## Third Subtitle And this third section of the document. ## Fourth Subtitle Some interesting examples follow. {: .note } Currently, the navigation structure is limited to 3 levels: grandchild pages cannot themselves have child pages. [Return to main page]({{site.baseurl}}/). ",
    "url": "/docker_provision/",
    
    "relUrl": "/docker_provision/"
  },"22": {
    "doc": "Git",
    "title": "Git",
    "content": "[comment]: # (Adds topnav bar above the main image) Home About News # Git {: .no_toc } {: .text-delta } - TOC {:toc} ## First Subtitle This is the first section of the document. ## Second Subtitle Second section of the document. ## Third Subtitle And this third section of the document. ## Fourth Subtitle Some interesting examples follow. [Return to main page]({{site.baseurl}}/). ",
    "url": "/git-en-espa%C3%B1ol/",
    
    "relUrl": "/git-en-español/"
  },"23": {
    "doc": "Ramas y PR",
    "title": "Ramas y PR",
    "content": "This page: Ramas y PR en Github # Ramas y Solicitud De Extraccíon en Git {: .no_toc } {: .text-delta } - TOC {:toc} --- ## First Subtitle This is the first section of the document. ## Second Subtitle Second section of the document. ## Third Subtitle And this third section of the document. ## Fourth Subtitle Some interesting examples follow. {: .note } Currently, the navigation structure is limited to 3 levels: grandchild pages cannot themselves have child pages. [Return to main page]({{site.baseurl}}/). ",
    "url": "/git-branches-pr/",
    
    "relUrl": "/git-branches-pr/"
  },"24": {
    "doc": "Implementación Git",
    "title": "Implementación Git",
    "content": "This page: Implementacion de Github # Implementando Git {: .no_toc } {: .text-delta } - TOC {:toc} --- ## First Subtitle This is the first section of the document. ## Second Subtitle Second section of the document. ## Third Subtitle And this third section of the document. ## Fourth Subtitle Some interesting examples follow. {: .note } Currently, the navigation structure is limited to 3 levels: grandchild pages cannot themselves have child pages. [Return to main page]({{site.baseurl}}/). ",
    "url": "/implementation-de-git/",
    
    "relUrl": "/implementation-de-git/"
  },"25": {
    "doc": "Provisión Git",
    "title": "Provisión Git",
    "content": "--- # Instalacion y Configuración de Github {: .no_toc } {: .text-delta } - TOC {:toc} --- ## First Subtitle This is the first section of the document. ## Second Subtitle Second section of the document. ## Third Subtitle And this third section of the document. ## Fourth Subtitle Some interesting examples follow. {: .note } Currently, the navigation structure is limited to 3 levels: grandchild pages cannot themselves have child pages. [Return to main page]({{site.baseurl}}/). ",
    "url": "/provision-git/",
    
    "relUrl": "/provision-git/"
  },"26": {
    "doc": "Instalacion Linux",
    "title": "Instalacion Linux",
    "content": "This page: Minikube Installation LINUX ",
    "url": "/instaler-ansible-en-linu/",
    
    "relUrl": "/instaler-ansible-en-linu/"
  },"27": {
    "doc": "Instalacion Linux",
    "title": "Instalacion Linux",
    "content": "This page: Minikube Installation LINUX ",
    "url": "/minikube_linux/minikube-installation-linux/",
    
    "relUrl": "/minikube_linux/minikube-installation-linux/"
  },"28": {
    "doc": "Instalacion Linux",
    "title": "Instalacion Linux",
    "content": "This page: Minikube Installation LINUX ",
    "url": "/minikube_linux/minikube-installation-linux/",
    
    "relUrl": "/minikube_linux/minikube-installation-linux/"
  },"29": {
    "doc": "Instalacion Linux",
    "title": "Instalacion Linux",
    "content": "This page: Minikube Installation LINUX ",
    "url": "/instalar-kubernetes/",
    
    "relUrl": "/instalar-kubernetes/"
  },"30": {
    "doc": "Instalacion MacOS",
    "title": "Instalacion MacOS",
    "content": "This page: Minikube Installation MacOS ",
    "url": "/instalar-minikube-macos/",
    
    "relUrl": "/instalar-minikube-macos/"
  },"31": {
    "doc": "Kubernetes",
    "title": "Kubernetes",
    "content": "[comment]: # (Adds topnav bar above the main image) Home About News # Kubernetes {: .no_toc } {: .text-delta } - TOC {:toc} ## First Subtitle This is the first section of the document. ## Second Subtitle Second section of the document. ## Third Subtitle And this third section of the document. ## Fourth Subtitle Some interesting examples follow. [Return to main page]({{site.baseurl}}/). ",
    "url": "/kubernetes-en-espa%C3%B1ol/",
    
    "relUrl": "/kubernetes-en-español/"
  },"32": {
    "doc": "Conceptos Kubernetes",
    "title": "Conceptos Kubernetes",
    "content": "This page: Kubernetes Basics ",
    "url": "/conceptos-de-kubernetes/",
    
    "relUrl": "/conceptos-de-kubernetes/"
  },"33": {
    "doc": "Implemetación Kubernetes",
    "title": "Implemetación Kubernetes",
    "content": "This page: Implementacion de Kubernetes [Return to main page]({{site.baseurl}}/). ",
    "url": "/implementation-de-kubernetes/",
    
    "relUrl": "/implementation-de-kubernetes/"
  },"34": {
    "doc": "Provisión Kubernetes",
    "title": "Provisión Kubernetes",
    "content": "--- # Instalacion y Configuración de Kubernetes {: .no_toc } {: .text-delta } - TOC {:toc} --- ## First Subtitle This is the first section of the document. ## Second Subtitle Second section of the document. ## Third Subtitle And this third section of the document. ## Fourth Subtitle Some interesting examples follow. {: .note } Currently, the navigation structure is limited to 3 levels: grandchild pages cannot themselves have child pages. [Return to main page]({{site.baseurl}}/). ",
    "url": "/provision-de-kubernetes/",
    
    "relUrl": "/provision-de-kubernetes/"
  },"35": {
    "doc": "DirColors en la Terminal",
    "title": "DirColors en la Terminal",
    "content": "# Colorizar la Terminal Con DirColors {: .no_toc } {: .text-delta } - TOC {:toc} Normalmente cuando usamos el comando `ls` para listar archivos y carpetas, la salida son colores defecto. Esto se puede modifiar para ver la salida del comando con ciertos colores que ayuda visualmente para leer mejor lo que vemos en la pantalla. El proceso para abilitar esto es simple: * instalar el paquete requerido * obtener el archivo de configuración y modificarlo * crear personalizaciones deseadas . ## Instalar y Configuración en CentOS En **CentOS 8 Stream**, es necesario instalar el paquete `coreutils-common` para poder usar colorizacion en el listado the archivos y carpetas. ```bash root@centos8-1 [DevEsp] hist:343 -> yum install coreutils-common-8.30-12.el8.x86_64 Last metadata expiration check: 21:25:08 ago on Tue 16 May 2023 08:04:12 PM PDT. Dependencies resolved. ================================================================================ Package Architecture Version Repository Size ================================================================================ coreutils-common x86_64 8.30-12.el8 baseos ================================================================================ Install 1 Package ``` Solo dos archivos son necesarios para esta tarea: * **/etc/DIR_COLORS** :: Archivo de configuración para el sistema entero * **~/.dir_colors** :: Archivo de configuración para el usuario individual La instalacion crea el archivo `/etc/DIR_COLORS`. Por defecto, este archivo debe ser legible por el mundo. ```bash root@centos8-1 [DevEsp] hist:344 -> ls -l /etc/DIR_COLORS -rw-r--r-- 1 root root 4536 Jul 13 2021 /etc/DIR_COLORS ``` A partir de ahora, la confiugration está disponible para todos los usuarios. Pero podemos copiar el archivo a `.dir_colors` en nuestro directorio de inicio $HOME para re-escribir los valores predeterminados del sistema. ```bash -> sudo cp /etc/DIR_COLORS ~/.dir_colors ``` Si modificamos nuestra copia, solo afecta nuestro ambiento. * * * ### Configurar El Ambiente Una vez que hemos copiado el archivo a nuestro directorio de inicio, agregemos esta linea en `~/.bash_profile` para abilitar esta característica automáticamente cada vez que entremos al sistema. ```bash eval $(dircolors ~/.dir_colors) ``` Esta otra forma es mejor porque verifica que el archivo existe y si no, entoces lee la base de datos disponible internamente en el sistema. ```bash [ -e ~/.dircolors ] && eval $(dircolors -b ~/.dircolors) || eval $(dircolors -b) ``` {: .note } > El comando `dircolors` usa la variable the ambient LS_COLORS para determinar los colores con los cuales mostrará la salida del comando `ls`. * * * ### Usando Color Con Salida de Comandos Ahora podemos usar el parámetro `--color` con el comando `ls` para ver la salida del comando en color. ```bash -> ls -l --color /usr/bin ``` Ahora, usando cualquiera de esos aliases resultará en salida de comando colorizado, por ejemplo este alias produce un listado de archivos formateado en tres columnas. ```bash -> ls ``` Si no deseamos color podemos hacer esto para nulificar el effecto. ```bash alias ls=\"ls --color=never\" ``` Para comprobar la configuración podemos listar algunos directorios conocidos. La salida del comando debería mostrar algunas carpetas y archivos en colores diferentes. ```bash -> ll /etc -> ls --color -l /sbin ``` . ## Instalar y Configuración en Ubuntu En Ubuntu, esta característica la provee el paquete `coreutils`. El paquete deberia estar instalado defecto haciendo disponible el comando `/usr/bin/dircolors` el cual toma una base de datos precargado, o también puede tomar por argumento un archivo con personalizaciones. Crear el archivo `~/.dir_colors` es opcional. Simplemente úsese asi: ```bash -> ls --color -l /sbin ``` Para más información ver la ayuda en línea. ```bash -> /usr/bin/dircolors --help ``` . ## Referencias * Ver las páginas manuales. ```bash -> man dir_colors -> man dircolors ``` * Ver el archivo de configuración. ```bash -> cat /etc/DIR_COLORS ``` * Página manual de [dir_colors para CentOS](https://linux.die.net/man/5/dir_colors) en linea. * Página manual de [dir_colors para Ubuntu](https://manpages.ubuntu.com/manpages/trusty/man1/dircolors.1.html) en linea. * Ver [vivid](https://github.com/sharkdp/vivid) en Github. ",
    "url": "/dircolors-terminal/",
    
    "relUrl": "/dircolors-terminal/"
  },"36": {
    "doc": "Linux",
    "title": "Linux",
    "content": "[comment]: # (Adds topnav bar above the main image) Home About News # Porqué Linux? {: .no_toc } {: .text-delta } - TOC {:toc} Hemos de preguntarnos la razón por la que queremos usar Linux. Linux es un sistema operativo de fuente abierta. Para usar Linux solo se requiere descargar la imagen ISO deseado e instalar el sistema operativo en la computadora deseada. Una imagen de ISO es un archivo que tiene el mismo contenido que un disco óptico such as CD/DVD. Generalmente no se requiere una licensia de usuario. Una licensia de uso solo se requiere en ciertos casos en los que una rama del producto se ha comercializado. ## Versatilidad Linux es un sistema operativo muy versátil. Hay varias versiones de Linux para escoger tales como Debian, Ubuntu, CentOS, Fedora, RedHat, Oracle Linux, OpenSuse, Getoo, y muchos otros [^1]. Cuál deberia escoger? Depende del caso. - Versiones para el usuario regular: son equipadas con utilidades y configuraciones que facilitan el uso diario. - Versiones para servidores: son equipadas para uso mas pesado en un ambiente de produccion empresarial. Linux puede usarse en sistemas fisicos y virtuales. La arquitectura del sistema operativo esta diseeñao de tal manera que puede instalarze en una variedad de platofmas. Eso ofrece un alto grade de flexibilidad. ## Extensible y Configurable Una vez installado, el ambiente operacional ofrece alternativas para un alto grado de personalization. En el mundo práctio hay una gran variedad de immplementaciones desde lo más básico hasta lo mas complejo y seguro. [^1]: [Lista de distrubuciones de Linux](https://en.wikipedia.org/wiki/List_of_Linux_distributions) [Return to main page]({{site.baseurl}}/). ",
    "url": "/linux-en-espa%C3%B1ol/",
    
    "relUrl": "/linux-en-español/"
  },"37": {
    "doc": "Comandos y Procesos",
    "title": "Comandos y Procesos",
    "content": "# Introducción a Comandos y Processos en Linux {: .no_toc } {: .text-delta } - TOC {:toc} ## Que es un Comando? (what is it, why you need them, and what can you do with them?) ## Estructura de un Comando Los comandos en Linux tienen cierto formato mas o menos consistente. ``` ``` Podemos definir cada parte de esta manera: * comando * el nombre del archivo o programa con atributo de ejecución * ejecuta la acción deseada * opciones * modifica o mejora la salida del comando * frequentemente se combina con otras opciones * como el nombre lo indica, su uso es opcional * argumentos * el objeto contra el que el comando ejecuta la acción * a menudo se puede pasar mas de un argumento * su uso puede ser opcional, y frequentemente tiene un sujeto por defecto ## Tipos de Comandos Linux provee una gran cantidad de comandos y utilidades para manejar ares especificas del sistema operativo. ### Comandos de Uso General Esto son comandos que son usualmente usados para interactuar con el sistem de manera generalizada. Por ejemplo: ls, cd, chown, useradd, etc. ### Comandos de Procesos Estos comandos so usados para manejar procesos del sistem y aplicaciones. ### Comandos de Network Esto son comandos usados en el manejo y configuracion de NICs, IP Addresses, routes, etc. ## Ejecucíon Simple o Enlazada Usualmente entramos comandos cuya función es simple. Hacer eco de una palabra en la terminal. ``` $ echo \"Hola, Mundo!\" ``` Podemos embuir otros comandos. Aqui damos un saludo e integramos el comando `date` dentro del comando `echo` para mostrar el saludo y la fecha de hoy. Notese que el comando entero a echo esta en doble comillas. ``` $ echo \"Hola, Mundo! Hoy es `date`\" ``` En este ejemplo, separamos los comandos con un semicolon `;` para ejecutar los comandos en sucesión. ``` $ echo \"Hola, Mundo!\"; date ``` Aqui hacemos eco de la frase, usamos la barra vertical `|` (pipe) para manipular la salida del comando y obtener un resultado modificado. ``` $ echo \"Hola, Mundo!\" | grep -i \"mundo\" ``` Ahora usemos redirección con el símbolo `>` para mandar la salida del comando a un archivo. Luego hacemos uso del comando `cat` para ver el resultado. ``` $ echo \"Hola, Mundo!\" > holamundo.txt $ cat holamundo.txt ``` ## Comandos en Scripts Esta bien que usemos instrucciones generales en la CLI. Pero cuando las tareas crecen en complejidad es necesario agrupar tareas en scripts. Escribamos un bash script que combine todos los ejemplos anteriormente expuestos. ```bash #!/bin/bash # # Di hola y muestra la fecha # DATE=`date +\"%m/%d/%y\"` LOG=greeting.log # verificar que LOG exist, y si no, crearlo. [ -f ${LOG} ] || echo \"INFO: creando ${LOG} porque no existe\" && touch ${LOG} # decir hola y mandar el resultado el archivo LOG function greeting(){ echo \"Hola, Mundo! Hoy es ${DATE}\" > ${LOG} } # ejecutemos la funcion greeting ``` En este script pasan varias cosas: - declaramos variables para almacenar valores que usamos en el código - verificamos la existencia de un archivo y tomamos una acción de acuerdo al resultado - hacemos uso de una funcion para aislar un sección del código que hace una tarea específica - usamos el nombre de la funcion para ejecutar el código Una cosa es clara, scripts ofrecen el método de agrupar comandos para ejecutar tareas que de otra manera seria imposible en la CLI. Mas tarde veremos en detalle la composición y estructura de bash scripts. ## Que es un Proceso? (what is it, why you need to know them, and what can you do with them?) Know what your app is doing. ### Process id: PID, PPID ### Troubleshoot: logs, journalctl ### Track and Monitor: ps, pstree, htop ### Adjust memory settings (java) [Return to main page]({{site.baseurl}}/). ",
    "url": "/linux-commandos/",
    
    "relUrl": "/linux-commandos/"
  },"38": {
    "doc": "Conceptos",
    "title": "Conceptos",
    "content": "# Conceptos e Introducción {: .no_toc } {: .text-delta } - TOC {:toc} ## Estructura del Sistema De Archivos (Filesystem) La estructura general del sistema de archivos de Linux puede representarse the esta manera. ``` ┌──────────────┐ │ root │ ┌───────────────────┬────────────┴───────┬──────┴───────────┬──────────────────┐ │ │ │ │ │ ┌──────▼────┐ ┌───────▼──────┐ ┌───────▼──────┐ ┌──────▼──────┐ ┌──────▼─────┐ │ /home │ │ /usr │ │ /var │ │ /opt │ │ /mnt │ └───────────┘ └──────────────┘ └──────────────┘ └─────────────┘ └────────────┘ ``` El diseño, organizacíon y jerarquia del sistema de archivoes puede modificarse para satisfacer necesidades específicas. El admininistrador de sistemas tiene la libertad the hacer ajustes en lo pertinente a la localizacíon absoluta del archivo asi como el tamaño correspondiente de cada parte del mismo. En este ejemplo, el comando `df` nos muestra la organización típica de un maquina virtual de CentOS 8 Stream. ```bash $ df -h Filesystem Size Used Avail Use% Mounted on overlay 59G 22G 35G 39% / tmpfs 64M 0 64M 0% /dev shm 64M 0 64M 0% /dev/shm tmpfs 7.9G 377M 7.5G 5% /run ``` La estructura es similar en Ubuntu. ## La Terminal La terminal es el area de trabajo donde podemos escribir comandos para interactuar con el sistema. ![](../../assets/images/terminal_example.png) ## El Shell El Shell es el programa que accepta los comandos que entramos y los ejecuta para realizar la acción deseada en el sistema. El Shell es la manera fundamental como interactuamos con el Sistema Operativo. Típicamente, Linux ofrece el BASH shell de entrada. Pero hay otros que podemos escoger tales como SH, CSH, TCSH, o ZSH. Cuando entramos al sistema, decimos que estamos en el Shell. Podemos usar la variable de ambiente `$SHELL` para saber cual nos ha sido asignado defecto. En el ejemplo que sigue, tenemos el BOURNE SHELL o SH. ```bash $ echo $SHELL /bin/sh ``` El Shell provee el prompt designado por el signo `$` arriba. El prompt viene a ser el lugar donde podemos entrar comandos. Esto se conoce como la Linea De Comandos. A menos que indiquemos de otra manera, usaremos el BASH shell en los ejemplos y ejercicions que hemos de exponer. ## Linea De Comandos (Command Line) La Linea De Comandos es el área de la terminal donde entramos las instrucciones que queremos mandar al sistema operativo. EL shell esta encargado de interpretar los comandos y los pasa a el Kernel para ejecutar la tarea especifica. {: .note } Nos vamos a referir a la Linea De Comandos for sus siglas en Ingles: **CLI**, lo que significa _Command Line Inteface_ o Interfaz de la Linea de Comandos. Generalmente, la CLI se identifica for el signo de dólar `$` cuando entramos al sistema. Eso puede ser personalizado en cualquier momento. En este ejemplo, escribimos comandos que nos ayudan a identificar el usuario con que hemos entrado al sistema. ```bash $ id uid=0(root) gid=0(root) groups=0(root) $ whoami root ``` Ha veces, cuando los comandos son largos y complejos, nos vemos en la necesidad de editar para afectar el resultado deseado. Las siguientes combinaciones de teclados facilitan la manipulación de la linea de la CLI. CTRL-a : Mover el cursor al principio de la linea de entrada CTRL-e : Mover el cursor al final de la linea de entrada CTRL-l : borrar todo el texto de la terminal CTRL-u : borra la linea de entrada completamente CTRL-_ : revertir la última acción de teclado ENTER : mandar el comando al shell (bash, csh, zsh, etc) DEL : borrar el simbolo en el que se encuentra el cursor Tipicamente, en CentOS 8 la CLI se ve asi: ```bash [user1@centos8-2 ~]$ ``` Mientras que Ubuntu se ve asi: ```bash $ ``` Podeos escribir comandos en el area marcada for el signo `$`. ## El Indicator (The Prompt) El indicador marca la parte de la terminal donde podemos entrar comandos. Generalmente se indica con el signo `$`. {: .warning } Si el indicador muestra el signo `#` en lugar de `$`, indica que hemos entrado con la cuenta del superusuario (root), la cual tiene control absoluto del sistema. Un solo comando equivocado y podemos causar gran daño. El indicador es primariamente designado con la variable de ambiente `PS1`, la cual es configurable de la manera que nos plazca. Podemos designar cualquier símbolo en vez de `$` o `#`. En el ejemplo que sigue, el signo de `$` es por defecto. Podemos usar el comando `export` para cambiarlo a `comando>> `. Luego usamos `echo` para verificar el ajuste. ```bash $ $ export PS1='comando>> ' comando>> comando>> echo $PS1 comando>> ``` Discutiremos el uso del comando `export` en otro documento. ## Directorio De Inicio (Home Directory) El directorio de inicio es donde aterrizamos y es nuestra base de operaciones. Es aquí donde creamos y mantenemos todos lo archivos, directorios, documentos, imagenes, programas y personalizaciones particulares a nuestro propio ambiente. Tan pronto como entramos al sistema, el comando `pwd` nos asiste para mostrarnos la localidad del directorio de inicio. ```bash $ pwd /root ``` Podemos usar `echo` para mostrar el directorio de inicio en cualquier momento después de esta en una sessión for algun tiempo. ```bash $ echo $HOME /root ``` La localidad estándar donde Linux create directorios de inicio es bajo `/home`, de manera que usualmente un usuario tiene `/home/user1`. Pero lo localidad puede cambiar de acuerdo al diseño del administrador de sistemas. ## Páginas Manuales (Man Pages) Las páginas manuales son documentos disponibles internamente en el sistema que nos proveen información acerca de las diferentes funciones y comandos disponibles. Por ejemplo la instrucción `man ls` nos muestra la página manual del comando `ls` que usamos para lstar archivos y directorios. Abajo vemos un extracto recortado de la página manual de `ls`. ``` NOMBRE ls, dir, vdir - listan los contenidos de directorios SINOPSIS ls [opciones] [fichero...] dir [fichero...] vdir [fichero...] Opciones de POSIX: [-CFRacdilqrtu1] Opciones de GNU (en la forma más corta): [-1abcdfghiklmnopqrstuvwxABCDFGHLNQRSUX] [-w cols] [-T cols] [-I patrón] [--full-time] [--show-control-chars] [--block-size=tamaño] [--format={long,verbose,commas,across,vertical,single-column}] DESCRIPCIÓN El programa ls lista primero sus argumentos no directorios fichero, y luego para cada argumento directorio todos los ficheros susceptibles de listarse contenidos en dicho directorio. OPCIONES DE POSIX -C Lista los ficheros en columnas, ordenados verticalmente. -F Añade tras cada nombre de directorio un `/', tras cada nombre de FIFO un `|', y tras cada nombre de un ejecutable un `*'. (...snip...) ``` Las páginas manuales de Ubuntu están disponibles en linea [^1] Es de notar que las páginas manuales no están instaladas por defecto en **máquinas virtuales**. El usuario puede instalar las páginas manuales para la localización que corresponda al idioma del usuario. Al entrar el comando `man ls` en una máquina virtual de Ubuntu, vemos este mensaje indicando que ha sido optimizada para remover espacio que no es crítico para operaciones normales. ```bash -> man ls This system has been minimized by removing packages and content that are not required on a system that users do not log into. To restore this content, including manpages, you can run the 'unminimize' command. You will still need to ensure the 'man-db' package is installed. ``` Es bastante común remover componentes innecesarios de servidores que no requieren cosas tales como páginas manuales. [^1]: [Páginas Manuales de Ubuntu](https://manpages.ubuntu.com/manpages/focal/es/) [Return to main page]({{site.baseurl}}/). ",
    "url": "/linux-conceptos/",
    
    "relUrl": "/linux-conceptos/"
  },"39": {
    "doc": "Ambiente de Inicio",
    "title": "Ambiente de Inicio",
    "content": "# Ambiente de Inicio en Linux {: .no_toc } {: .text-delta } - TOC {:toc} Algunos sabores de sistemas operativos son mas facil de usar desde punto de vista del usuario casual, mientras que otros son para uso serio en un ambiente de production en los que las exigencias requieren mas potencia de CPU y Memoria. Una de los mejores características de Linux es que puede personalizarse de la manera que deseamos. El ambiente del usuario es un conjunto de elementos que vienen a hacer la manera en la que el usuario puede interactuar con el sistema operativo. ## Cuenta de Usuario Para poder entra a un sistema de Linux, necesitamos una cuenta de usuario. Una cuenta típica de usuario se ve de esta manera: ``` devuser:x:2085:2086::/home/devuser:/bin/bash ``` Esa entrada muestra el nombre del usuario `devuser`, el directorio de inicio `/home/devuser` y el shell `/bin/bash`. Cada uno de esos detalles puede ser personalizado. Discutiremos cada parte en otros articulos. ## Directorio de Inicio Cada usuario puede organizar su Directorio de Inicio en manera differente. El directorio puede referirse usando el símbolo de tilde `~` o la variable de ambiente `$HOME`. Si estamos en algun directorio diferente the `$HOME` y queremos ir al directorio de inicio, podemos usar el comando `cd` como en los ejemplos que siguen. * Usar `~` ``` devuser@ubuntu2204-1 [DevEsp] hist:60 -> cd ~ ``` * Usar `$HOME` ``` devuser@ubuntu2204-1 [DevEsp] hist:61 -> cd $HOME ``` Para verificar que estamos en nuestro `$HOME` podemos usar varias opciones. - el comando `echo` - el comando `pwd` - la variable de ambiente `PWD` ``` devuser@ubuntu2204-1 [DevEsp] hist:62 -> echo $HOME /home/devuser devuser@ubuntu2204-1 [DevEsp] hist:62 -> pwd /home/devuser devuser@ubuntu2204-1 [DevEsp] hist:63 -> echo $PWD /home/devuser ``` ## Las Variables de Ambiente Linux provee varias variables de ambiente precargadas con información útil que disponibles para uso immediato. Por ejemplo, podemos usar el comando `env` para ver las variables disponibles. Generalmente, las variables de ambiente estan definidas en `/etc/profile`, `/etc/bashrc`, `~/.bashrc`, o `~/.bash_profile`. En CentOS 8, el archivo del usuario `~/.bashrc` muestra un bloque indicando que lee ajustes encontrados en `/etc/bashrc`. ``` [user1@centos8-2 ~]$ cat ~/.bashrc # .bashrc # Source global definitions if [ -f /etc/bashrc ]; then . /etc/bashrc fi ``` Por ejemplo, en CentOS, el archivo `/etc/bashrc` tiene la definición para el SHELL por defecto. ``` SHELL=/bin/bash ``` En CentOS 8 Stream podemos usar el comando `env` para ver todas las variables de ambiente que tenemos disponibles. ``` devuser@centos8-2 [DevEsp] hist:18 -> env LANG=en_US.UTF-8 HISTCONTROL=ignoreboth:erasedups HOSTNAME=centos8-2 which_declare=declare -f USER=devuser PWD=/home/devuser HOME=/home/devuser MAIL=/var/spool/mail/devuser SHELL=/bin/bash TERM=xterm SHLVL=1 LOGNAME=devuser PATH=/home/devuser/bin:/home/devuser/Library/Python/3.9/bin:/home/devuser/bin:/home/devuser/Library/Python/3.9/bin:/home/devuser/bin:/home/devuser/Library/Python/3.9/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin HISTSIZE=1000 LESSOPEN=||/usr/bin/lesspipe.sh %s BASH_FUNC_which%%=() { ( alias; eval ${which_declare} ) | /usr/bin/which --tty-only --read-alias --read-functions --show-tilde --show-dot \"$@\" } _=/usr/bin/env ``` El comando `set` muestra información aún mas expandida organizada alfabeticamente (parcialmente extraida abajo). ``` devuser@centos8-2 [DevEsp] hist:30 -> set BASH=/bin/bash BASH_VERSINFO=([0]=\"4\" [1]=\"4\" [2]=\"20\" [3]=\"1\" [4]=\"release\" [5]=\"x86_64-redhat-linux-gnu\") BASH_VERSION='4.4.20(1)-release' COLUMNS=128 DIRSTACK=() ENVS=/vagrant/shared/DATAM2/learning/learning_env01 EUID=2074 GROUPS=() HISTCONTROL=ignoreboth:erasedups HISTFILE=/home/devuser/.bash_history HISTFILESIZE=1000 HISTSIZE=1000 HOME=/home/devuser HOSTNAME=centos8-2 ``` {: .highlight } Notese que cada una de las variables es en letras mayúsculas. La salida de los comandos arriba se ve de manera muy similar en Ubuntu 22.04. El uso y propósito de estas variables es consistente a travéz de todos los sabores de Linux El propósito de cada una es a seguir: SHELL : el interfaz que permite entrar comandos que permite al usuario interactuar con el sistema operativo. PWD : el paso al directorio en el que nos encontramos en un momento dado LOGNAME : el nombre del usuario reconozido como el nombre para entra al sistema HOME : el directorio de inicio TERM : el tipo de terminal asignada por defecto por el sistema operativo USER : el nombre de usuario, lo mismo que LOGNAME PATH : colecciíon de directorios con paso absolute para dar accesso a utilidades y comandos MAIL : paso absolute para donde el usuario recibe correo electrónico HISTIZE : valor configurable para la longitud del almacenamiento de comando ejecutados ## Terminal de Acceso Una que que tenemos la cuenta de usuario y directorio de inicio, necesitamos acceder el sistema a travez de un shell usando como interfaz la terminal. La terminal es el area de trabajo donde podemos escribir comandos para interactuar con el sistema. [Return to main page]({{site.baseurl}}/). ",
    "url": "/linux_initial_environment/",
    
    "relUrl": "/linux_initial_environment/"
  },"40": {
    "doc": "Provision",
    "title": "Provision",
    "content": "# Provisonar Ambiente de Linux {: .no_toc } {: .text-delta } - TOC {:toc} --- ## Escoger y Obtener una Distribución Primero que nada debemos escoger el sabor de linux que queremos implementar. {: .warning } Se debe tener en mente el ciclo de actualización y desmantelamiento de versiones. En la discussión de los [conceptos](../linux_conceptos) de Linux mencionamos que podemos escoger una version apta para servidores u otra para usuarios regulares. La sección de [referencias](#referencias) muestra una lista the varios sitios para descargar distribuciones completas de Linux. La manera típica de obtener una distribución es ir al sitio del distribuidor y descargar la imagen en formato de ISO. Podemos descargar el ISO en mas de una manera. Por ejemplo, la imagen de _CentOS 8 Stream_. * directamente del sitio de internet usando el URL en el navegador web. ``` https://mirrors.edge.kernel.org/centos/8-stream/isos/x86_64/CentOS-Stream-8-20230509.0-x86_64-dvd1.iso ``` * directamente en la linea de comandos en un terminal usando el el comando `wget` ``` wget https://mirrors.edge.kernel.org/centos/8-stream/isos/x86_64/CentOS-Stream-8-20230509.0-x86_64-dvd1.iso ``` Los ISO estan generalmente disponibles en varias localidades sincronizadas conocidos como \"espejos\" porque reflejan el mismo contenido. Podemos escoger un espejo que este cerca geograficamente a nuestra localidad para que el descargue sea más rápido; esto es importante en lugares donde la velocidad de internet no es óptima. ### Recursos de Computación Requeridos Hoy día la vasta mayoría de hardware es the arquictectura AMD64, Intel 64, and 64-bit ARM. La página de [CentOS](https://docs.centos.org/en-US/8-docs/standard-install/assembly_system-requirements-reference/) indica que los siguiente es necesario para instalar el sistema operativo: * 10Gib de disco duro * 768MiB de RAM usando USB/DVD/NFS * 1.5GiB usando HTTP/HTTPS/FTP Los requerimientos para [Ubuntu](https://help.ubuntu.com/community/Installation/SystemRequirements) son mas exigentes: * 2 GHz dual core processor * 4 GiB RAM * 25 GB (8.6 GB por lo menos) * VGA capaz de 1024x768 resolución de pantalla Cuando se usa HTTP/HTTPS/FTP como método de instalación se require mas memoria porque el tráfico del internet lledo y vieniendo a travéz del cable es muy intenso. El requerimiento de disco duro aumenta dependiendo de los paquetes escogidos para provisionar el sistema. Por ejemplo, instalar el sistema gráfico de GNOME consume mas disco duro, y tambiem mas memoria fisica para correr normalmente. ### Entender Actualización y Seguridad Fedora tiene un [ciclo](https://docs.fedoraproject.org/en-US/releases/lifecycle/) se actualizacion agresivo de cada seis meses lo que hace muy difícil mantener los sistemas al dia. De otro lado, Ubuntu tiene un [ciclo](https://ubuntu.com/about/release-cycle) mas largo; la version mas estable se conoce come la version de lanzamiento a largo plazo (LTS, o Long Term Support). {: .note } Es importante entender el ciclo de vida de los diferentes sistems operativos. ## Decidir Método de Instalación Todas las distribuciones de Linux tienen un sistema y opciones similares de instalación. ISO : usando le imagen ISO descargarda de la internet DVD : usando un disco óptico en una unidad de DVD USB : usando una targeta de memoria adjunta a un puerto de USB Kickstart/NFS : método usado por RedHat/CentOS/Fedora a travéz del cable de network Clonar : copiar un sistema a otro con la misma configuración de hardware ## Donde Obtener Linux Linux puede descargarse de cualquier espejo disponible. Varios sabores de linux estan disponibles en [kernel.org](https://mirrors.edge.kernel.org/) Algunos sabores de Linux de fuente abierta tales come CentOS [^2], Fedora [^3], Ubuntu [^4], Debian [^5], Gentoo [^6], están disponibles gratis en varias versiones. Otras versiones tales como RedHat [^7], requieren un licensia de usuario. ## [](referencias)Referencias [^1]: [Lista de distrubuciones de Linux](https://en.wikipedia.org/wiki/List_of_Linux_distributions) [^2]: [Descargar CentOS](https://mirrors.edge.kernel.org/centos/) [^3]: [Descargar Fedora](https://fedoraproject.org/) [^4]: [Descargar Ubuntu](https://launchpad.net/ubuntu/+cdmirrors) [^5]: [Descargar Debian](https://www.debian.org/CD/http-ftp/) [^6]: [Descargar Gentoo](https://www.gentoo.org/downloads/) [^7]: [Descargar RedHat](https://access.redhat.com/downloads/) [Return to main page]({{site.baseurl}}/). ",
    "url": "/linux-provision/",
    
    "relUrl": "/linux-provision/"
  },"41": {
    "doc": "Minikube",
    "title": "Minikube",
    "content": "[comment]: # (Adds topnav bar above the main image) Home About News # Minikube {: .no_toc } {: .text-delta } - TOC {:toc} --- Parent page for MINIKUBE ## First Subtitle This is the first section of the document. ## Second Subtitle Second section of the document. ## Third Subtitle And this third section of the document. ## Fourth Subtitle Some interesting examples follow: #### Example 1 {: .no_toc } ```yaml --- layout: default title: 404 nav_exclude: true --- ``` #### Example 2 {: .no_toc } ```yaml --- layout: default title: 404 nav_exclude: true --- ``` The examples above will not show up in the **TABLE OF CONTENTS** [Return to main page]({{site.baseurl}}/). ",
    "url": "/minikube-en-espa%C3%B1ol/",
    
    "relUrl": "/minikube-en-español/"
  },"42": {
    "doc": "Conceptos Minikube",
    "title": "Conceptos Minikube",
    "content": "This page: Minikube Basics # Minikube En este document hablaremos the Minikube. _El objectivo es enternder la manera de usar esta herramienta para crear un ambiente para probar varios aspectos de Kubernetes._ ## Listar Minikube Ejecutemos el comando para listar la version the minikube instalada localmente. ```bash -> minikube version minikube version: v1.28.0 commit: 986b1ebd987211ed16f8cc10aed7d2c42fc8392f ``` ## Verificar Instancias de Kubernetes Verificar las instancias the kubernetes installadas corrientemente. This is el resultado en forma de **comando**. ```bash -> minikube profile list 🎉 minikube 1.29.0 is available! Download it: https://github.com/kubernetes/minikube/releases/tag/v1.29.0 💡 To disable this notice, run: 'minikube config set WantUpdateNotification false' |-------------------|-----------|---------|--------------|------|---------|---------|-------|--------| Profile | VM Driver | Runtime | IP | Port | Version | Status | Nodes | Active |-------------------|-----------|---------|--------------|------|---------|---------|-------|--------| minikube-v1.23.4a | hyperkit | docker | 172.16.156.9 | 8443 | v1.23.4 | Stopped | 3 | |-------------------|-----------|---------|--------------|------|---------|---------|-------|--------| ``` Este es el resultado en forma the **tabla**. |-------------------|-----------|---------|--------------|------|---------|---------|-------|--------| Profile | VM Driver | Runtime | IP | Port | Version | Status | Nodes | Active |-------------------|-----------|---------|--------------|------|---------|---------|-------|--------| minikube-v1.23.4a | hyperkit | docker | 172.16.156.9 | 8443 | v1.23.4 | Stopped | 3 | |-------------------|-----------|---------|--------------|------|---------|---------|-------|--------| > NOTA: la lista es dinámica y puede cambiar [Return to main page]({{site.baseurl}}/). ",
    "url": "/minikube-conceptos/",
    
    "relUrl": "/minikube-conceptos/"
  },"43": {
    "doc": "Implementacion Minikube",
    "title": "Implementacion Minikube",
    "content": "This page: Minikube Create Cluster [Return to main page]({{site.baseurl}}/). ",
    "url": "/minikube-implementacion/",
    
    "relUrl": "/minikube-implementacion/"
  },"44": {
    "doc": "Instalacion Linux",
    "title": "Instalacion Linux",
    "content": "This page: Minikube Installation LINUX ",
    "url": "/instalar-minikube-linux/",
    
    "relUrl": "/instalar-minikube-linux/"
  },"45": {
    "doc": "Provisión Minikube",
    "title": "Provisión Minikube",
    "content": "# Instalacion y Configuración de Minikube {: .no_toc } {: .text-delta } - TOC {:toc} --- ## First Subtitle This is the first section of the document. ## Second Subtitle Second section of the document. ## Third Subtitle And this third section of the document. ## Fourth Subtitle Some interesting examples follow. {: .note } Currently, the navigation structure is limited to 3 levels: grandchild pages cannot themselves have child pages. [Return to main page]({{site.baseurl}}/). ",
    "url": "/minikube-provision/",
    
    "relUrl": "/minikube-provision/"
  },"46": {
    "doc": "Usar en Linux",
    "title": "Usar en Linux",
    "content": "This page: Minikube Use LINUX ",
    "url": "/usar-minikube-linux/",
    
    "relUrl": "/usar-minikube-linux/"
  },"47": {
    "doc": "News",
    "title": "News",
    "content": "[comment]: # (Adds topnav bar above the main image) Home About News En esta página vamos a agregar puntos de interés que se discuten en el mundo de la informática. [Return to main page]({{site.baseurl}}/). ",
    "url": "/news/",
    
    "relUrl": "/news/"
  },"48": {
    "doc": "Manejando Paquetes",
    "title": "Manejando Paquetes",
    "content": "# Introducción a Manejo De Paquetes {: .no_toc } {: .text-delta } - TOC {:toc} --- ## See RPM files Show complete list of files for an rpm package ``` hist:56 -> rpm -ql pam-1.3.1-15.el8.x86_64 /etc/pam.d /etc/pam.d/config-util /etc/pam.d/fingerprint-auth /etc/pam.d/other /etc/pam.d/password-auth /etc/pam.d/postlogin /etc/pam.d/smartcard-auth ``` Show config files for the app ``` hist:85 -> rpm -qc pam /etc/pam.d/config-util /etc/pam.d/fingerprint-auth /etc/pam.d/other /etc/pam.d/password-auth /etc/pam.d/postlogin /etc/pam.d/smartcard-auth /etc/pam.d/system-auth /etc/security/access.conf ``` Shows libraries files. ``` -> rpm -qR pam /bin/sh /sbin/ldconfig /sbin/ldconfig /sbin/ldconfig audit-libs >= 1.0.8 config(pam) = 1.3.1-15.el8 coreutils glibc >= 2.3.90-37 libaudit.so.1()(64bit) ``` info for an rpm ``` -> rpm -qi pam Name : pam Version : 1.3.1 Release : 15.el8 Architecture: x86_64 Install Date: Sun Jun 18 18:28:52 2023 Group : System Environment/Base Size : 2627190 License : BSD and GPLv2+ Signature : RSA/SHA256, Mon May 10 07:14:17 2021, Key ID 05b555b38483c65d Source RPM : pam-1.3.1-15.el8.src.rpm Build Date : Thu May 6 22:07:13 2021 Build Host : x86-02.mbox.centos.org Relocations : (not relocatable) Packager : CentOS Buildsys Vendor : CentOS URL : http://www.linux-pam.org/ Summary : An extensible library which provides authentication for applications Description : PAM (Pluggable Authentication Modules) is a system security tool that allows system administrators to set authentication policy without having to recompile programs that handle authentication. ``` This is the first section of the document. ## Second Subtitle Second section of the document. ## Third Subtitle And this third section of the document. ## Fourth Subtitle Some interesting examples follow. {: .note } Currently, the navigation structure is limited to 3 levels: grandchild pages cannot themselves have child pages. [Return to main page]({{site.baseurl}}/). ",
    "url": "/manejar-paquetes-linux/",
    
    "relUrl": "/manejar-paquetes-linux/"
  },"49": {
    "doc": "Instalacion Linux",
    "title": "Instalacion Linux",
    "content": "This page: add GIT content here ",
    "url": "/some-git-file-here/",
    
    "relUrl": "/some-git-file-here/"
  },"50": {
    "doc": "Postgresql",
    "title": "Postgresql",
    "content": "[comment]: # (Adds topnav bar above the main image) Home About News # PostgreSQL {: .no_toc } {: .text-delta } - TOC {:toc} ## First Subtitle This is the first section of the document. ## Second Subtitle Second section of the document. ## Third Subtitle And this third section of the document. ## Fourth Subtitle Some interesting examples follow. [Return to main page]({{site.baseurl}}/). ",
    "url": "/postgresql-en-espa%C3%B1ol/",
    
    "relUrl": "/postgresql-en-español/"
  },"51": {
    "doc": "Conceptos Postgresql",
    "title": "Conceptos Postgresql",
    "content": "This page: Postgresql Basics ",
    "url": "/conceptos-postgresql/",
    
    "relUrl": "/conceptos-postgresql/"
  },"52": {
    "doc": "Implemetación Postgresql",
    "title": "Implemetación Postgresql",
    "content": "This page: Implementacion de Postgresql [Return to main page]({{site.baseurl}}/). ",
    "url": "/implementation-postgresql/",
    
    "relUrl": "/implementation-postgresql/"
  },"53": {
    "doc": "Provisión Postgresql",
    "title": "Provisión Postgresql",
    "content": "--- # Instalacion y Configuración de Postgresql {: .no_toc } {: .text-delta } - TOC {:toc} --- ## First Subtitle This is the first section of the document. ## Second Subtitle Second section of the document. ## Third Subtitle And this third section of the document. ## Fourth Subtitle Some interesting examples follow. {: .note } Currently, the navigation structure is limited to 3 levels: grandchild pages cannot themselves have child pages. [Return to main page]({{site.baseurl}}/). ",
    "url": "/provision-postgresql/",
    
    "relUrl": "/provision-postgresql/"
  },"54": {
    "doc": "RPMBuild",
    "title": "RPMBuild",
    "content": "This page: Como usar RPMBuild para provisionar paquetes personalizados. ",
    "url": "/rpmbuild-centos-redhat/",
    
    "relUrl": "/rpmbuild-centos-redhat/"
  },"55": {
    "doc": "SSH",
    "title": "SSH",
    "content": "# Introducción a SSH {: .no_toc } {: .text-delta } - TOC {:toc} --- ## Que es SSH? SSH (Secure SHell) es un programa que sirve para entrar a sistemas remotos. Tambien se usa para ejecutar comandos en forma remota. SSH es un protocolo seguro que ofrece comunicaciones cifradas y reemplaza a otros protocolos menos seguros tales como RSH o TELNET. Esta utilidad usa el protocolo TCP, y por defecto usa el puerto 22. ## Cliente Y Servidor El paquete en RHEL y CentOS se llama OpenSSH y ofrecen el cliente y servidor. Generalmente, el paquete de servidor solo se instal en sistemas de computadoras a las que se espera connectar remotament via usuario o aplicacion. El paquete de cliente se instala en computadoras de usuarios que desean connectarse a servidores a los que tienen accesso. [Return to main page]({{site.baseurl}}/). ",
    "url": "/ssh-linux/",
    
    "relUrl": "/ssh-linux/"
  },"56": {
    "doc": "Implementación de SSH",
    "title": "Implementación de SSH",
    "content": "# Acceso Remoto con SSH {: .no_toc } {: .text-delta } - TOC {:toc} --- ## Acceso Remoto El uso mas general de SSH is entrar a un sistema remotamente. Eso se consigue al simplemente entrar el comando ssh seguido per el hostname del servidor que queremos acceder. Supongamos que queremos entrar al servidor con hostname `remoteServer`. ``` ssh remoteServer ``` Normalmente, se asume que queremos entrar con el mismo number de usuario que tenemos en el servidor de origen. Pero si es necesario, podemos especicar el usuario en el servidor remote asi: ``` ssh devuser@remoteServer ``` Tambien podemos usar la dirección de internet. ``` ssh devuser@11.22.33.44 ``` ## Comandos remotos de ssh La idea central de SSH es que podemos hacer operaciones que pueden ser ejecutadas directamente en el servidor remoto. Ejecutar un comando o script remotamente en el sistem. ``` -> ssh client3 \"Hola, soy el usuario devuse!\" -> ssh client3 uname -a -> ssh client3 /usr/local/bin/myscript.sh ``` Copiar algo al sistema remote ``` -> scp directory1 fichero1 client3:/tmp ``` ",
    "url": "/ssh-implementation/",
    
    "relUrl": "/ssh-implementation/"
  },"57": {
    "doc": "SSH sin Contraseña",
    "title": "SSH sin Contraseña",
    "content": "# SSH sin Contraseña {: .no_toc } {: .text-delta } - TOC {:toc} --- ## Porque necesitamos esto? En un ambiente de trabajo es casi una certedad que como ingenerio de devops tendremos que conectarnos a servidores en localidades remotas a las que no tenenmos acceso físico. Esto requiere de algun mecanimo para acceder tales servidores de una manera segura. En este articulo veremos una discusión breve del uso de llaves de OpenSSH que sirven como método de autenticación entre servidores remotos. Supongamos que el usuario `devuser` se quiere conectar de client2 and client3 ```bash client1 ---> client3 ``` En client1 vamos a crear llaves RSA en OpenSSH y copiar la llave a client3. Veamos pues los pasos para permitir ssh sin contraseña entre servidores remotos. ## Crear el directorio .ssh Entremos a cada sistema con el usuario `devuser` ```bash Sun 2023Jun25 17:52:02 PDT root@client1 [ CentOS8 ] ~ hist:330 -> su - devuser Last login: Sun Jun 25 17:47:06 PDT 2023 on pts/1 ``` Notese que estamos en el directorio de inicio denotado per el simbolo `~` en el prompt. Crear el directorio `.ssh` y dar el permiso mostrado. ```bash -> mkdir ~/.ssh -> chmod 700 ~/.ssh ``` Verifiquemos ```bash -> ls -ld .ssh drwx------ 2 devuser devuser 4096 Jun 18 18:31 .ssh/ ``` Crear el fichero `authorized_keys` con el permiso mostrado ```bash -> touch ~/.ssh/authorized_keys -> chmod 600 ~/.ssh/authorized_keys ``` Verifiquemos. ```bash -> ls -l .ssh/authorized_keys -rw------- 1 devuser devuser 569 Jun 18 18:31 .ssh/authorized_keys ``` ## Generar la llave RSA Generar la llave aceptando todos los valores per defecto. Usamos el comando `ssh-keygen` con la opción `-t` para specificar que deseamos una llave de tipo `RSA`. ```bash Sun 2023Jun25 18:07:42 PDT devuser@client1 [ CentOS8 ] ~ hist:127 -> ssh-keygen -t rsa Generating public/private rsa key pair. Enter file in which to save the key (/home/devuser/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/devuser/.ssh/id_rsa. Your public key has been saved in /home/devuser/.ssh/id_rsa.pub. The key fingerprint is: SHA256:8jllUzSbYoOa+LghFo8JJH9UpJ+WuXkSQDpzJIP6xa4 devuser@client1 The key's randomart image is: +---[RSA 3072]----+ | .o o.o o |. * o . + |o.+.= . + + |+. =o+ * . + |..ooo @ S + | ..*.+ * + . | =.+ = = | .E. o o . | . | +----[SHA256]-----+ ``` {: .highlight } > El \"radomart\" es abreviación para \"random art\", o \"arte aleatorio\" que es para > faciliatar la comparacion de images para validar la llave de un sistema a otro. La operación anterior ha creado dos ficheros en el directorio`~/.ssh`: - la llave **privada**: /home/devuser/.ssh/id_rsa - la llave **pública**: /home/devuser/.ssh/id_rsa.pub ```bash devuser@client1 [ CentOS8 ] ~ hist:128 -> ls -l ~/.ssh/ total 12 -rw------- 1 devuser devuser 0 Jun 25 18:16 authorized_keys -rw------- 1 devuser devuser 2602 Jun 25 18:07 id_rsa -rw-r--r-- 1 devuser devuser 569 Jun 25 18:07 id_rsa.pub -rw-r--r-- 1 devuser devuser 0 Jun 18 18:31 known_hosts ``` El fichero `~/.ssh/id_rsa.pub` contiene la llave pública. Podemos distribuir esta llave pública a cuantos servidores queramos acceder con esta llave. El comentario al final de la linea indica el servidor a la que esta llave pertenece. EL contenido entero de la llave es en una sola linea. ```bash devuser@client1 [ CentOS8 ] ~ hist:130 -> cat ~/.ssh/id_rsa.pub ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC9HrNdiFpR2dewlPVkanf0WmD0zbkdpkJlzwzbKw1Pq5fOgZPWBnHNGtcon+GRMCIju0Cy3dlUjz8jIvkxd+ow7DHO/5o28S/sEKYM7384PG2P2al8WWhrIrJC82EYKe6uVuJXYW/E3bEfskqcVP82lkzgLyQ0Dd5GTcSi7qA5KEcicofM+gxl8QgyCir6SGBAXUAC4JWxsYMjn+MUBxGIc/J8dzobZmhPQMXP897/S49NvC+glP8r8jeX6AZ6JNbM+AGJ5hvntP+OrTQvJSSkOdC3OrqMO6lcZ3dbzgObqWSjDeplTP/17/UdYu/ruyo1Ys7TMqMIeWXUDoYIUsuEVP59nEwhRKVFd+h2SsUNtvxUfdrpHZG8+aWVAiGFVwrv5TUfmMpLcrcZxVObz/K+El4SsUj+p3mPd7gTJg+Umj3Mvn52KD9kK7cwNhrpgBVawrdEMTBmUnHDjEHhMLoqrV9Rvo07uRsu3pKZQpL6UD/3nO2jHNwGrg0S5nTZ4ck= devuser@client1 ``` Copiemos la llave publica a un sistema usando el comando `ssh-copy-id` y pasando como argumento el servidor de destino. ``` -> ssh-copy-id client3 ``` En seguida podemos usar el comando `ssh` para entrar al sistema remoto. ``` -> ssh client3 ``` ## Comandos remotos de ssh Igualmente podemos hacer otras operaciones que pueden ser ejecutadas directamente en el servidor remoto. Ejecutar un comando o script remotamente en el sistem. ``` -> ssh client3 \"Hola, soy el usuario devuse!\" -> ssh client3 uname -a -> ssh client3 /usr/local/bin/myscript.sh ``` Copiar algo al sistema remote ``` -> scp directory1 fichero1 client3:/tmp ``` ",
    "url": "/ssh-sin-contrasena/",
    
    "relUrl": "/ssh-sin-contrasena/"
  },"58": {
    "doc": "Instalar y Configurar SSH",
    "title": "Instalar y Configurar SSH",
    "content": "# Instalar y Configurar SSH {: .no_toc } {: .text-delta } - TOC {:toc} --- ## Instalar OpenSSH on RHEL9 En Linux SSH es mas conocido como OpenSSH, de hecho todos los paquetes de esta utilidad usan el nombre `openssh`. Dependienddo del caso, debemos installer el cliente o servidor de OpenSSH antes que podamos usarlo. Ent RHEL9 y CentOS, entrar este comando para instalar los ficheros principales, el client y servidor. ```bash Sun 2023Jun25 23:33:33 UTC root@client3 [ RHEL9 ] hist:22 -> yum install openssh.x86_64 openssh-clients.x86_64 openssh-server.x86_64 ``` openssh.x86_64 : Este paquete incluye los ficheros principales necesarios para el cliente y servidor de OpenSSH. openssh-clients : Este paquete incluye los clientes necesarios para hacer connecciones cifrada a servidors de SSH. openssh-server : Este paquete contiene el Secure Shell Damon (sshd). El damon permite que clientes de SSH se connecte en forma segura al servidor de SSH. Verifiquemos los paquetes instalados ```bash -> rpm -qa | grep openssh openssh-8.7p1-29.el9_2.x86_64 openssh-clients-8.7p1-29.el9_2.x86_64 openssh-server-8.7p1-29.el9_2.x86_64 ``` Este comando nos muestra le fichero de configuracion `/etc/ssh/sshd_config`. ```bash -> rpm -qc openssh-server-8.7p1-29.el9_2.x86_64 /etc/pam.d/sshd /etc/ssh/sshd_config /etc/ssh/sshd_config.d/50-redhat.conf /etc/sysconfig/sshd ``` En RHEL9, el directorio `/etc/ssh` contiene todos los fichers de configuracion. El fichero de configuracion es `/etc/ssh/sshd_config`. ``` root@client3 [ RHEL9 ] hist:29 -> ls -l /etc/ssh total 584 -rw-r--r-- 1 root root 578094 Apr 13 13:01 moduli -rw-r--r-- 1 root root 1921 Apr 13 13:01 ssh_config drwxr-xr-x 2 root root 4096 Jun 25 23:43 ssh_config.d/ -rw------- 1 root root 3667 Apr 13 13:01 sshd_config drwx------ 2 root root 4096 Jun 25 23:43 sshd_config.d/ ``` ## Instalar OpenSSH on UBUNTU 22.04 En Ubuntu 22.04, entrar este comando para instalar el client y servidor. ```bash -> apt install openssh-client openssh-server ``` Las definiciones de cada paquete en CentOS tambien se aplican a Ubuntu. Este comando nos muestra la lista parcial de ficheros que incluyen el fichero de configuracion. ```bash Sun 2023Jun25 23:47:03 UTC root@client2 [ U2204 ] ~ hist:42 -> dpkg-query -L openssh-server /. /etc /etc/init.d/ssh /etc/pam.d /etc/pam.d/sshd /etc/ssh /etc/ssh/moduli /etc/ssh/sshd_config.d /usr/sbin/sshd ``` En Ubuntu, el directorio `/etc/ssh` contiene todos los fichers de configuracion. El fichero de configuracion es `/etc/ssh/sshd_config`. ```bash Sun 2023Jun25 23:51:57 UTC root@client2 [ U2204 ] /etc/ssh hist:47 -> ls -l /etc/ssh total 540 -rw-r--r-- 1 root root 505426 Nov 23 2022 moduli -rw-r--r-- 1 root root 1650 Nov 23 2022 ssh_config drwxr-xr-x 2 root root 4096 Nov 23 2022 ssh_config.d/ -rw------- 1 root root 505 Jun 25 23:44 ssh_host_ecdsa_key -rw-r--r-- 1 root root 174 Jun 25 23:44 ssh_host_ecdsa_key.pub -rw------- 1 root root 399 Jun 25 23:44 ssh_host_ed25519_key -rw-r--r-- 1 root root 94 Jun 25 23:44 ssh_host_ed25519_key.pub -rw------- 1 root root 2602 Jun 25 23:44 ssh_host_rsa_key -rw-r--r-- 1 root root 566 Jun 25 23:44 ssh_host_rsa_key.pub -rw-r--r-- 1 root root 342 Dec 7 2020 ssh_import_id -rw-r--r-- 1 root root 3254 Nov 23 2022 sshd_config drwxr-xr-x 2 root root 4096 Nov 23 2022 sshd_config.d/ ``` ## Proteger OpenSSH ### Poner permisos al fichero de configuración {: .warning } > Hagamos copias de los ficheros antes de hacer cambios. Copiemos le fichero `/etc/ssh/sshd_config` para protegerlo de que sea cambiado al quitarle el permiso de escribir. ```bash cp /etc/ssh/sshd_config /etc/ssh/sshd_config_ORIG chmod a-w /etc/ssh/sshd_config_ORIG ``` Poner los permision apropiados del fichero de configuración. ```bash chown root:root /etc/ssh/sshd_config chmod og-rwx /etc/ssh/sshd_config ``` Verifiquemos. ```bash -> stat /etc/ssh/sshd_config File: /etc/ssh/sshd_config Size: 3667 Blocks: 8 IO Block: 4096 regular file Device: 100034h/1048628d Inode: 3834901 Links: 1 Access: (0600/-rw-------) Uid: ( 0/ root) Gid: ( 0/ root) Access: 2023-06-26 00:00:23.352573142 +0000 Modify: 2023-04-13 13:01:49.000000000 +0000 Change: 2023-06-26 00:08:52.401172205 +0000 Birth: 2023-06-25 23:43:46.435161012 +0000 ``` ### Poner el nivel de log apropiado Editar /etc/ssh/sshd_config y poner el parametro mostrado. ```bash LogLevel INFO ``` ### Abilitar PAM Cuando UsePAM se usa, PAM observa los modulos de account y session. Eso es importante si queremos restringir acceso a servicios basados en el ip address, tiempo u otros aspectos de la cuenta de usuario. Editar /etc/ssh/sshd_config y poner el parametro mostrado. ```bash UsePAM yes ``` ### Deabilitar logins de root Esto bloquea logins para el usuario raiz (root). Requiere que usuarios entren con su propia cuenta y de acuerdo a privilegios pueden acceder la raiz una vez que han entrado al sistema. ```bash PermitRootLogin no ``` ### Desabilitar RHOSTS Con esto no se permite el uso del fichero `.rhosts` o `/etc/hosts.equiv` si esta presente. ```bash IgnoreRhosts yes ``` ### Contraseñas vacias no se permiten Esto bloquea el uso de contraseñas vacias en el servidor the SSH. ``` PermitEmptyPasswords no ``` ### Desabilitar Variables de Ambiente Esto no permite que usuarios pongan variables de ambiente a travez del deamon de SSH, lo cual podria potencialmente sobrepasar los protocolos de seguridad. ``` PermitUserEnvironment no ``` ### Desabilitar X11 Forwarding Desabilitar el uso de aplicaciones X11 directamente al conectarse al servidor de OpenSSH. ``` X11Forwarding no ``` ### Desabilitar TCP Forwarding SSH port forwarding es un mecanismo para crear tuneles desde el cliente al servidor o vicerversa. Un usuario malicioso podria crear una puerta trasera para entrar a la red interna desde su computadora personal. Esto es inherentemente un riesgo muy alto que no debe permitirse. ``` AllowTcpForwarding yes ``` ### Crear un banner Poner esta linea y crear el fichero `/etc/issue` con un mensaje indicando directivas de privacidad u otras guías necesarias que indiquen la politica interna de uso y seguridad. ``` Banner /etc/issue ``` ### Numero Máximo de Atentados Con esto limitamos el número de atentados que el usuario tiene antes que sea bloqueado del sistema. De esta manera reducimos la posibilidad de ataques de fuerza bruta para infiltrar el sistema ilegalmente. ``` MaxAuthTries 6 ``` ",
    "url": "/ssh-provison/",
    
    "relUrl": "/ssh-provison/"
  },"59": {
    "doc": "Paquetes en Ubuntu",
    "title": "Manejo de Paquetes en Ubuntu",
    "content": ". | Advanced Packaging Tool – APT | Otras Opciones Usadas Con APT | Mostrar Información De Paquetes | Mostrar los Archivos De Un Paquete | Buscar Paquetes En Linea | Otros Problemas Con APT | Referencias | . ",
    "url": "/ubuntu-manejar-paquetes/#manejo-de-paquetes-en-ubuntu",
    
    "relUrl": "/ubuntu-manejar-paquetes/#manejo-de-paquetes-en-ubuntu"
  },"60": {
    "doc": "Paquetes en Ubuntu",
    "title": "Advanced Packaging Tool – APT",
    "content": "The utilidad Advanced Packaging Tool (APT) se usa para instalar, mejorar o actualizar paquetes en Ubuntu. A seguido veamos los ejemplos más usados. Instalar un Paquete . sudo apt install nmap . Remover un Paquete . sudo apt remove nmap . Actualizar el index . sudo apt update . Actualizar el sistem entero . sudo apt upgrade . Buscar un paquete . sudo apt search coreutils . ",
    "url": "/ubuntu-manejar-paquetes/#advanced-packaging-tool--apt",
    
    "relUrl": "/ubuntu-manejar-paquetes/#advanced-packaging-tool--apt"
  },"61": {
    "doc": "Paquetes en Ubuntu",
    "title": "Otras Opciones Usadas Con APT",
    "content": "Mostrar las opciones para apt con el parámetro --help . sudo apt --help . Estas opciones son útiles. list listar paquetes basado en el nombre search buscar en la descripcion de los paquetes show mostras los detalles de un paquete reinstall reinstaller paquestes autoremove automáticament borrar paquetes que no estan en uso full-upgrade actualizar el sistem borrando/instalando/actualizando paquetes Cada actividad que resulta de usar apt va en el archivo de registro /var/log/dpkg.log. Ubuntu mantiene un sitio 1 en donde podemos buscar información de paquetes. ",
    "url": "/ubuntu-manejar-paquetes/#otras-opciones-usadas-con-apt",
    
    "relUrl": "/ubuntu-manejar-paquetes/#otras-opciones-usadas-con-apt"
  },"62": {
    "doc": "Paquetes en Ubuntu",
    "title": "Mostrar Información De Paquetes",
    "content": "Buscar un paquete. -&gt; sudo apt search coreutils Sorting... Done Full Text Search... Done coreutils/jammy,now 8.32-4.1ubuntu1 amd64 [installed] GNU core utilities policycoreutils/jammy 3.3-1build1 amd64 SELinux core policy utilities . En el primer caso, podemos ver que el paquete está instalado como lo indica la palabra “installed”. En el segundo caso, solo muestra que el paquete esta disponible para ser instalado. Mostrar información acerca del paquete. -&gt; sudo apt show coreutils Package: coreutils Version: 8.32-4.1ubuntu1 Priority: required Essential: yes Section: utils Origin: Ubuntu Maintainer: Ubuntu Developers &lt;ubuntu-devel-discuss@lists.ubuntu.com&gt; Original-Maintainer: Michael Stone &lt;mstone@debian.org&gt; Bugs: https://bugs.launchpad.net/ubuntu/+filebug Installed-Size: 7283 kB Pre-Depends: libacl1 (&gt;= 2.2.23), libattr1 (&gt;= 1:2.4.44), libc6 (&gt;= 2.34), libgmp10 (&gt;= 2:6.2.1+dfsg), libselinux1 (&gt;= 3.1~) Homepage: http://gnu.org/software/coreutils Task: minimal, server-minimal Download-Size: 1438 kB APT-Manual-Installed: yes APT-Sources: http://archive.ubuntu.com/ubuntu jammy/main amd64 Packages Description: GNU core utilities . ",
    "url": "/ubuntu-manejar-paquetes/#mostrar-informaci%C3%B3n-de-paquetes",
    
    "relUrl": "/ubuntu-manejar-paquetes/#mostrar-información-de-paquetes"
  },"63": {
    "doc": "Paquetes en Ubuntu",
    "title": "Mostrar los Archivos De Un Paquete",
    "content": "A veces queremos saber sin un paquete ofrece un archivo o utilidad en particular. Esto lo podemos saber al mostrar la lista entera de archivos que el paquete a instalado en el sistema. Este ejemplo muestra una lista parcial de archivos que son parte de coreutils. -&gt; dpkg-query -L coreutils /. /bin /bin/cat /bin/chgrp /bin/chmod /bin/chown /bin/cp /bin/date /bin/dd ... A seguido veamos los archivos que están en un paquete que no hemos instalado todavía. Primero installemos apt-file y actulizemos el sistema. -&gt; sudo apt-get install apt-file -&gt; sudo apt-file update . Luego listemos los archivos de algún paquete que nos interese. -&gt; apt-file list &lt;nomber-del-paquete&gt; . ",
    "url": "/ubuntu-manejar-paquetes/#mostrar-los-archivos-de-un-paquete",
    
    "relUrl": "/ubuntu-manejar-paquetes/#mostrar-los-archivos-de-un-paquete"
  },"64": {
    "doc": "Paquetes en Ubuntu",
    "title": "Buscar Paquetes En Linea",
    "content": "Ubuntu ofrece la facilidad de buscar información acerca de paquetes or archivos específicos. Primero verifiquemos la arquitectura de nuestro sistema . -&gt; uname -a Linux ubuntu2204-1 5.15.49-linuxkit #1 SMP Tue Sep 13 07:51:46 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux . Esto muestra que solo podemos usar paquetes de 64Bits. Sigamos los pasos siguientes: . | Ir a http://packages.ubuntu.com/ | Ir a la sección Search package directories – (Buscar paquetes de directorio) | Entrar el nombre del paquete en la caja Keyword y seleccionar Only Show exact matches (Mostrar solo coincidencias exactas) | Seleccionar la Distribution y cliquear el botón Search | Seleccionar el paquete deseado cuando el resultado aparezca | Hacia el final de la página, cliquera el enlace list of files que corresponde a la arquitectura de nuestro sistema | La lista de archivos se mostrará en la página siguiente | . Este commando mostraría lo mismo . curl -s https://packages.ubuntu.com/$(lsb_release -cs)/$(dpkg --print-architecture)/&lt;NOMBRE-DE-PAQUETE&gt;/filelist . Por ejemplo, esto es para policycoreutils. curl -s https://packages.ubuntu.com/$(lsb_release -cs)/$(dpkg --print-architecture)/policycoreutils/filelist . ",
    "url": "/ubuntu-manejar-paquetes/#buscar-paquetes-en-linea",
    
    "relUrl": "/ubuntu-manejar-paquetes/#buscar-paquetes-en-linea"
  },"65": {
    "doc": "Paquetes en Ubuntu",
    "title": "Otros Problemas Con APT",
    "content": "Algunas veces sucede que no podemos instalar o buscar come en este ejemplo. -&gt; /usr/bin/apt search vim Sorting... Done Full Text Search... Done . Primero hay que actualizar el sistema. -&gt; apt-get update . Y entoces podemos buscar paquetes o instalar como discutimos anteriormente. -&gt; /usr/bin/apt search vim Sorting... Done Full Text Search... Done vim/oldstable 2:8.2.2434-3+deb11u1 amd64 Vi IMproved - enhanced vi editor . ",
    "url": "/ubuntu-manejar-paquetes/#otros-problemas-con-apt",
    
    "relUrl": "/ubuntu-manejar-paquetes/#otros-problemas-con-apt"
  },"66": {
    "doc": "Paquetes en Ubuntu",
    "title": "Referencias",
    "content": ". | https://packages.ubuntu.com/ &#8617; . | . ",
    "url": "/ubuntu-manejar-paquetes/#referencias",
    
    "relUrl": "/ubuntu-manejar-paquetes/#referencias"
  },"67": {
    "doc": "Paquetes en Ubuntu",
    "title": "Paquetes en Ubuntu",
    "content": " ",
    "url": "/ubuntu-manejar-paquetes/",
    
    "relUrl": "/ubuntu-manejar-paquetes/"
  },"68": {
    "doc": "Usar en Linux",
    "title": "Usar en Linux",
    "content": "This page: Minikube Use LINUX ",
    "url": "/usar-ansible-en-linux/",
    
    "relUrl": "/usar-ansible-en-linux/"
  },"69": {
    "doc": "Usar en Linux",
    "title": "Usar en Linux",
    "content": "This page: Minikube Use LINUX ",
    "url": "/minikube_linux/minikube-use-linux/",
    
    "relUrl": "/minikube_linux/minikube-use-linux/"
  },"70": {
    "doc": "Usar en Linux",
    "title": "Usar en Linux",
    "content": "This page: Minikube Use LINUX ",
    "url": "/minikube_linux/minikube-use-linux/",
    
    "relUrl": "/minikube_linux/minikube-use-linux/"
  },"71": {
    "doc": "Usar en Linux",
    "title": "Usar en Linux",
    "content": "This page: Minikube Use LINUX ",
    "url": "/usar-kubernetes/",
    
    "relUrl": "/usar-kubernetes/"
  },"72": {
    "doc": "Usar en MacOS",
    "title": "Usar en MacOS",
    "content": "This page: Minikube Use MACOS ",
    "url": "/usar-minikube-macos/",
    
    "relUrl": "/usar-minikube-macos/"
  }
}
